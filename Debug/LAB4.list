
LAB4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dbc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08002ec8  08002ec8  00012ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f2c  08002f2c  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08002f2c  08002f2c  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f2c  08002f2c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f2c  08002f2c  00012f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f30  08002f30  00012f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08002f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  20000084  08002fb8  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08002fb8  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a476  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d46  00000000  00000000  0002a523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  0002c270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  0002cef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183a3  00000000  00000000  0002da98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d4ee  00000000  00000000  00045e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008853d  00000000  00000000  00053329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db866  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036f8  00000000  00000000  000db8b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08002eb0 	.word	0x08002eb0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08002eb0 	.word	0x08002eb0

0800014c <reset_7SEG1>:
void turn_off_singleLed(unsigned int index) {
	int shift = 3 + index;
	GPIOA->ODR |= (0x1<<shift);
}

void reset_7SEG1() {
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	GPIOB->ODR |= 0x7F;
 8000150:	4b04      	ldr	r3, [pc, #16]	; (8000164 <reset_7SEG1+0x18>)
 8000152:	68db      	ldr	r3, [r3, #12]
 8000154:	4a03      	ldr	r2, [pc, #12]	; (8000164 <reset_7SEG1+0x18>)
 8000156:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 800015a:	60d3      	str	r3, [r2, #12]
}
 800015c:	bf00      	nop
 800015e:	46bd      	mov	sp, r7
 8000160:	bc80      	pop	{r7}
 8000162:	4770      	bx	lr
 8000164:	40010c00 	.word	0x40010c00

08000168 <reset_7SEG2>:

void reset_7SEG2() {
 8000168:	b480      	push	{r7}
 800016a:	af00      	add	r7, sp, #0
	GPIOB->ODR |= (0x7F<<7);
 800016c:	4b04      	ldr	r3, [pc, #16]	; (8000180 <reset_7SEG2+0x18>)
 800016e:	68db      	ldr	r3, [r3, #12]
 8000170:	4a03      	ldr	r2, [pc, #12]	; (8000180 <reset_7SEG2+0x18>)
 8000172:	f443 537e 	orr.w	r3, r3, #16256	; 0x3f80
 8000176:	60d3      	str	r3, [r2, #12]
}
 8000178:	bf00      	nop
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr
 8000180:	40010c00 	.word	0x40010c00

08000184 <display_7SEG1>:

uint16_t segmentArray[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};

void display_7SEG1(int number) {
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
	reset_7SEG1();
 800018c:	f7ff ffde 	bl	800014c <reset_7SEG1>
	GPIOB->ODR &= ~segmentArray[number];
 8000190:	4b07      	ldr	r3, [pc, #28]	; (80001b0 <display_7SEG1+0x2c>)
 8000192:	68db      	ldr	r3, [r3, #12]
 8000194:	4907      	ldr	r1, [pc, #28]	; (80001b4 <display_7SEG1+0x30>)
 8000196:	687a      	ldr	r2, [r7, #4]
 8000198:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800019c:	43d2      	mvns	r2, r2
 800019e:	4611      	mov	r1, r2
 80001a0:	4a03      	ldr	r2, [pc, #12]	; (80001b0 <display_7SEG1+0x2c>)
 80001a2:	400b      	ands	r3, r1
 80001a4:	60d3      	str	r3, [r2, #12]
}
 80001a6:	bf00      	nop
 80001a8:	3708      	adds	r7, #8
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010c00 	.word	0x40010c00
 80001b4:	20000000 	.word	0x20000000

080001b8 <display_7SEG2>:

void display_7SEG2(int number) {
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
	reset_7SEG2();
 80001c0:	f7ff ffd2 	bl	8000168 <reset_7SEG2>
	GPIOB->ODR &= ~(segmentArray[number]<<7);
 80001c4:	4b07      	ldr	r3, [pc, #28]	; (80001e4 <display_7SEG2+0x2c>)
 80001c6:	68db      	ldr	r3, [r3, #12]
 80001c8:	4907      	ldr	r1, [pc, #28]	; (80001e8 <display_7SEG2+0x30>)
 80001ca:	687a      	ldr	r2, [r7, #4]
 80001cc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80001d0:	01d2      	lsls	r2, r2, #7
 80001d2:	43d2      	mvns	r2, r2
 80001d4:	4611      	mov	r1, r2
 80001d6:	4a03      	ldr	r2, [pc, #12]	; (80001e4 <display_7SEG2+0x2c>)
 80001d8:	400b      	ands	r3, r1
 80001da:	60d3      	str	r3, [r2, #12]
}
 80001dc:	bf00      	nop
 80001de:	3708      	adds	r7, #8
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	40010c00 	.word	0x40010c00
 80001e8:	20000000 	.word	0x20000000

080001ec <turn_off_all_7seg>:

void turn_off_all_7seg() {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
	reset_7SEG1();
 80001f0:	f7ff ffac 	bl	800014c <reset_7SEG1>
	reset_7SEG2();
 80001f4:	f7ff ffb8 	bl	8000168 <reset_7SEG2>
}
 80001f8:	bf00      	nop
 80001fa:	bd80      	pop	{r7, pc}

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f000 fcd6 	bl	8000bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f824 	bl	8000250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000208:	f000 f8d4 	bl	80003b4 <MX_GPIO_Init>
  MX_TIM2_Init();
 800020c:	f000 f85c 	bl	80002c8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000210:	f000 f8a6 	bl	8000360 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000214:	480b      	ldr	r0, [pc, #44]	; (8000244 <main+0x48>)
 8000216:	f001 fc53 	bl	8001ac0 <HAL_TIM_Base_Start_IT>

  HAL_UART_Transmit(&huart1, (uint8_t *)time, sizeof(time), 100);
 800021a:	4b0b      	ldr	r3, [pc, #44]	; (8000248 <main+0x4c>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4619      	mov	r1, r3
 8000220:	2364      	movs	r3, #100	; 0x64
 8000222:	2204      	movs	r2, #4
 8000224:	4809      	ldr	r0, [pc, #36]	; (800024c <main+0x50>)
 8000226:	f002 f82c 	bl	8002282 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  set_timer(TIME);
 800022a:	2014      	movs	r0, #20
 800022c:	f000 fa98 	bl	8000760 <set_timer>
  turn_off_all_7seg();
 8000230:	f7ff ffdc 	bl	80001ec <turn_off_all_7seg>
  SCH_init();
 8000234:	f000 f944 	bl	80004c0 <SCH_init>
  init_tasks();
 8000238:	f000 fc4e 	bl	8000ad8 <init_tasks>
//  SCH_delete_task(5);
//  SCH_delete_task(0);
//  SCH_delete_task(6);
  while (1)
  {
	  SCH_dispatch_tasks();
 800023c:	f000 fa04 	bl	8000648 <SCH_dispatch_tasks>
 8000240:	e7fc      	b.n	800023c <main+0x40>
 8000242:	bf00      	nop
 8000244:	200000a0 	.word	0x200000a0
 8000248:	200003b0 	.word	0x200003b0
 800024c:	200000e8 	.word	0x200000e8

08000250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b090      	sub	sp, #64	; 0x40
 8000254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000256:	f107 0318 	add.w	r3, r7, #24
 800025a:	2228      	movs	r2, #40	; 0x28
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f002 f9a4 	bl	80025ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]
 8000270:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000272:	2302      	movs	r3, #2
 8000274:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000276:	2301      	movs	r3, #1
 8000278:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027a:	2310      	movs	r3, #16
 800027c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800027e:	2300      	movs	r3, #0
 8000280:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000282:	f107 0318 	add.w	r3, r7, #24
 8000286:	4618      	mov	r0, r3
 8000288:	f000 ffb0 	bl	80011ec <HAL_RCC_OscConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000292:	f000 f90f 	bl	80004b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000296:	230f      	movs	r3, #15
 8000298:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800029a:	2300      	movs	r3, #0
 800029c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2100      	movs	r1, #0
 80002ae:	4618      	mov	r0, r3
 80002b0:	f001 fa1e 	bl	80016f0 <HAL_RCC_ClockConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002ba:	f000 f8fb 	bl	80004b4 <Error_Handler>
  }
}
 80002be:	bf00      	nop
 80002c0:	3740      	adds	r7, #64	; 0x40
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b086      	sub	sp, #24
 80002cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002ce:	f107 0308 	add.w	r3, r7, #8
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002dc:	463b      	mov	r3, r7
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002e4:	4b1d      	ldr	r3, [pc, #116]	; (800035c <MX_TIM2_Init+0x94>)
 80002e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 80002ec:	4b1b      	ldr	r3, [pc, #108]	; (800035c <MX_TIM2_Init+0x94>)
 80002ee:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80002f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002f4:	4b19      	ldr	r3, [pc, #100]	; (800035c <MX_TIM2_Init+0x94>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80002fa:	4b18      	ldr	r3, [pc, #96]	; (800035c <MX_TIM2_Init+0x94>)
 80002fc:	220a      	movs	r2, #10
 80002fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000300:	4b16      	ldr	r3, [pc, #88]	; (800035c <MX_TIM2_Init+0x94>)
 8000302:	2200      	movs	r2, #0
 8000304:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000306:	4b15      	ldr	r3, [pc, #84]	; (800035c <MX_TIM2_Init+0x94>)
 8000308:	2200      	movs	r2, #0
 800030a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800030c:	4813      	ldr	r0, [pc, #76]	; (800035c <MX_TIM2_Init+0x94>)
 800030e:	f001 fb87 	bl	8001a20 <HAL_TIM_Base_Init>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000318:	f000 f8cc 	bl	80004b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800031c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000320:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000322:	f107 0308 	add.w	r3, r7, #8
 8000326:	4619      	mov	r1, r3
 8000328:	480c      	ldr	r0, [pc, #48]	; (800035c <MX_TIM2_Init+0x94>)
 800032a:	f001 fd1d 	bl	8001d68 <HAL_TIM_ConfigClockSource>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000334:	f000 f8be 	bl	80004b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000338:	2300      	movs	r3, #0
 800033a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800033c:	2300      	movs	r3, #0
 800033e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000340:	463b      	mov	r3, r7
 8000342:	4619      	mov	r1, r3
 8000344:	4805      	ldr	r0, [pc, #20]	; (800035c <MX_TIM2_Init+0x94>)
 8000346:	f001 fee5 	bl	8002114 <HAL_TIMEx_MasterConfigSynchronization>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000350:	f000 f8b0 	bl	80004b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000354:	bf00      	nop
 8000356:	3718      	adds	r7, #24
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	200000a0 	.word	0x200000a0

08000360 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000364:	4b11      	ldr	r3, [pc, #68]	; (80003ac <MX_USART1_UART_Init+0x4c>)
 8000366:	4a12      	ldr	r2, [pc, #72]	; (80003b0 <MX_USART1_UART_Init+0x50>)
 8000368:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800036a:	4b10      	ldr	r3, [pc, #64]	; (80003ac <MX_USART1_UART_Init+0x4c>)
 800036c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000370:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000372:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <MX_USART1_UART_Init+0x4c>)
 8000374:	2200      	movs	r2, #0
 8000376:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000378:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <MX_USART1_UART_Init+0x4c>)
 800037a:	2200      	movs	r2, #0
 800037c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800037e:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <MX_USART1_UART_Init+0x4c>)
 8000380:	2200      	movs	r2, #0
 8000382:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000384:	4b09      	ldr	r3, [pc, #36]	; (80003ac <MX_USART1_UART_Init+0x4c>)
 8000386:	220c      	movs	r2, #12
 8000388:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800038a:	4b08      	ldr	r3, [pc, #32]	; (80003ac <MX_USART1_UART_Init+0x4c>)
 800038c:	2200      	movs	r2, #0
 800038e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000390:	4b06      	ldr	r3, [pc, #24]	; (80003ac <MX_USART1_UART_Init+0x4c>)
 8000392:	2200      	movs	r2, #0
 8000394:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000396:	4805      	ldr	r0, [pc, #20]	; (80003ac <MX_USART1_UART_Init+0x4c>)
 8000398:	f001 ff26 	bl	80021e8 <HAL_UART_Init>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003a2:	f000 f887 	bl	80004b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	200000e8 	.word	0x200000e8
 80003b0:	40013800 	.word	0x40013800

080003b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b086      	sub	sp, #24
 80003b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ba:	f107 0308 	add.w	r3, r7, #8
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c8:	4b22      	ldr	r3, [pc, #136]	; (8000454 <MX_GPIO_Init+0xa0>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a21      	ldr	r2, [pc, #132]	; (8000454 <MX_GPIO_Init+0xa0>)
 80003ce:	f043 0304 	orr.w	r3, r3, #4
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b1f      	ldr	r3, [pc, #124]	; (8000454 <MX_GPIO_Init+0xa0>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0304 	and.w	r3, r3, #4
 80003dc:	607b      	str	r3, [r7, #4]
 80003de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e0:	4b1c      	ldr	r3, [pc, #112]	; (8000454 <MX_GPIO_Init+0xa0>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a1b      	ldr	r2, [pc, #108]	; (8000454 <MX_GPIO_Init+0xa0>)
 80003e6:	f043 0308 	orr.w	r3, r3, #8
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	4b19      	ldr	r3, [pc, #100]	; (8000454 <MX_GPIO_Init+0xa0>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	f003 0308 	and.w	r3, r3, #8
 80003f4:	603b      	str	r3, [r7, #0]
 80003f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 80003f8:	2200      	movs	r2, #0
 80003fa:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 80003fe:	4816      	ldr	r0, [pc, #88]	; (8000458 <MX_GPIO_Init+0xa4>)
 8000400:	f000 fec2 	bl	8001188 <HAL_GPIO_WritePin>
                          |LED5_Pin|LED6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a1_Pin|b1_Pin|c1_Pin|d2_Pin
 8000404:	2200      	movs	r2, #0
 8000406:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800040a:	4814      	ldr	r0, [pc, #80]	; (800045c <MX_GPIO_Init+0xa8>)
 800040c:	f000 febc 	bl	8001188 <HAL_GPIO_WritePin>
                          |e1_Pin|f1_Pin|g1_Pin|a2_Pin
                          |b2_Pin|c2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin LED6_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8000410:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000414:	60bb      	str	r3, [r7, #8]
                          |LED5_Pin|LED6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000416:	2301      	movs	r3, #1
 8000418:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041a:	2300      	movs	r3, #0
 800041c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041e:	2302      	movs	r3, #2
 8000420:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000422:	f107 0308 	add.w	r3, r7, #8
 8000426:	4619      	mov	r1, r3
 8000428:	480b      	ldr	r0, [pc, #44]	; (8000458 <MX_GPIO_Init+0xa4>)
 800042a:	f000 fd31 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : a1_Pin b1_Pin c1_Pin d2_Pin
                           e2_Pin f2_Pin g2_Pin d1_Pin
                           e1_Pin f1_Pin g1_Pin a2_Pin
                           b2_Pin c2_Pin */
  GPIO_InitStruct.Pin = a1_Pin|b1_Pin|c1_Pin|d2_Pin
 800042e:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000432:	60bb      	str	r3, [r7, #8]
                          |e2_Pin|f2_Pin|g2_Pin|d1_Pin
                          |e1_Pin|f1_Pin|g1_Pin|a2_Pin
                          |b2_Pin|c2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000434:	2301      	movs	r3, #1
 8000436:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000438:	2300      	movs	r3, #0
 800043a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043c:	2302      	movs	r3, #2
 800043e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000440:	f107 0308 	add.w	r3, r7, #8
 8000444:	4619      	mov	r1, r3
 8000446:	4805      	ldr	r0, [pc, #20]	; (800045c <MX_GPIO_Init+0xa8>)
 8000448:	f000 fd22 	bl	8000e90 <HAL_GPIO_Init>

}
 800044c:	bf00      	nop
 800044e:	3718      	adds	r7, #24
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	40021000 	.word	0x40021000
 8000458:	40010800 	.word	0x40010800
 800045c:	40010c00 	.word	0x40010c00

08000460 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim ) {
 8000460:	b580      	push	{r7, lr}
 8000462:	b084      	sub	sp, #16
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
	timer_run();
 8000468:	f000 f996 	bl	8000798 <timer_run>
	if (timerFlag==1) {
 800046c:	4b0d      	ldr	r3, [pc, #52]	; (80004a4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	2b01      	cmp	r3, #1
 8000472:	d113      	bne.n	800049c <HAL_TIM_PeriodElapsedCallback+0x3c>
		SCH_update();
 8000474:	f000 f840 	bl	80004f8 <SCH_update>
		char buffer[5];
		sprintf(buffer, "%u \n", (unsigned int)(time));
 8000478:	4b0b      	ldr	r3, [pc, #44]	; (80004a8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	f107 0308 	add.w	r3, r7, #8
 8000480:	490a      	ldr	r1, [pc, #40]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000482:	4618      	mov	r0, r3
 8000484:	f002 f89a 	bl	80025bc <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)buffer, sizeof(buffer), 100);
 8000488:	f107 0108 	add.w	r1, r7, #8
 800048c:	2364      	movs	r3, #100	; 0x64
 800048e:	2205      	movs	r2, #5
 8000490:	4807      	ldr	r0, [pc, #28]	; (80004b0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000492:	f001 fef6 	bl	8002282 <HAL_UART_Transmit>
		set_timer(TIME);
 8000496:	2014      	movs	r0, #20
 8000498:	f000 f962 	bl	8000760 <set_timer>
	}
}
 800049c:	bf00      	nop
 800049e:	3710      	adds	r7, #16
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	200003b4 	.word	0x200003b4
 80004a8:	200003b0 	.word	0x200003b0
 80004ac:	08002ec8 	.word	0x08002ec8
 80004b0:	200000e8 	.word	0x200000e8

080004b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b8:	b672      	cpsid	i
}
 80004ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004bc:	e7fe      	b.n	80004bc <Error_Handler+0x8>
	...

080004c0 <SCH_init>:
#include "main.h"

sTask SCH_tasks_G[SCH_MAX_TASKS];
uint8_t currentID = 0;

void SCH_init(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
	uint8_t id;
	for (id=0; id<SCH_MAX_TASKS; id++) {
 80004c6:	2300      	movs	r3, #0
 80004c8:	71fb      	strb	r3, [r7, #7]
 80004ca:	e006      	b.n	80004da <SCH_init+0x1a>
		SCH_delete_task(id);
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	4618      	mov	r0, r3
 80004d0:	f000 f8fa 	bl	80006c8 <SCH_delete_task>
	for (id=0; id<SCH_MAX_TASKS; id++) {
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	3301      	adds	r3, #1
 80004d8:	71fb      	strb	r3, [r7, #7]
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	2b27      	cmp	r3, #39	; 0x27
 80004de:	d9f5      	bls.n	80004cc <SCH_init+0xc>
	}
	currentID = 0;
 80004e0:	4b04      	ldr	r3, [pc, #16]	; (80004f4 <SCH_init+0x34>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	701a      	strb	r2, [r3, #0]
//	error_code_G = 0;
	timer_init();
 80004e6:	f000 f979 	bl	80007dc <timer_init>
}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	200003ac 	.word	0x200003ac

080004f8 <SCH_update>:

void SCH_update(void) {
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
	uint8_t id;
	for (id=0; id<currentID; id++) {
 80004fe:	2300      	movs	r3, #0
 8000500:	71fb      	strb	r3, [r7, #7]
 8000502:	e042      	b.n	800058a <SCH_update+0x92>
		if (SCH_tasks_G[id].pTask) {
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	4a26      	ldr	r2, [pc, #152]	; (80005a0 <SCH_update+0xa8>)
 8000508:	011b      	lsls	r3, r3, #4
 800050a:	4413      	add	r3, r2
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d038      	beq.n	8000584 <SCH_update+0x8c>
			if (SCH_tasks_G[id].delay==0) {
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	4a22      	ldr	r2, [pc, #136]	; (80005a0 <SCH_update+0xa8>)
 8000516:	011b      	lsls	r3, r3, #4
 8000518:	4413      	add	r3, r2
 800051a:	3304      	adds	r3, #4
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d123      	bne.n	800056a <SCH_update+0x72>
				SCH_tasks_G[id].runMe += 1;
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	4a1e      	ldr	r2, [pc, #120]	; (80005a0 <SCH_update+0xa8>)
 8000526:	011b      	lsls	r3, r3, #4
 8000528:	4413      	add	r3, r2
 800052a:	330c      	adds	r3, #12
 800052c:	781a      	ldrb	r2, [r3, #0]
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	3201      	adds	r2, #1
 8000532:	b2d1      	uxtb	r1, r2
 8000534:	4a1a      	ldr	r2, [pc, #104]	; (80005a0 <SCH_update+0xa8>)
 8000536:	011b      	lsls	r3, r3, #4
 8000538:	4413      	add	r3, r2
 800053a:	330c      	adds	r3, #12
 800053c:	460a      	mov	r2, r1
 800053e:	701a      	strb	r2, [r3, #0]
				if (SCH_tasks_G[id].period)
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	4a17      	ldr	r2, [pc, #92]	; (80005a0 <SCH_update+0xa8>)
 8000544:	011b      	lsls	r3, r3, #4
 8000546:	4413      	add	r3, r2
 8000548:	3308      	adds	r3, #8
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d019      	beq.n	8000584 <SCH_update+0x8c>
					SCH_tasks_G[id].delay = SCH_tasks_G[id].period;
 8000550:	79fa      	ldrb	r2, [r7, #7]
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	4912      	ldr	r1, [pc, #72]	; (80005a0 <SCH_update+0xa8>)
 8000556:	0112      	lsls	r2, r2, #4
 8000558:	440a      	add	r2, r1
 800055a:	3208      	adds	r2, #8
 800055c:	6812      	ldr	r2, [r2, #0]
 800055e:	4910      	ldr	r1, [pc, #64]	; (80005a0 <SCH_update+0xa8>)
 8000560:	011b      	lsls	r3, r3, #4
 8000562:	440b      	add	r3, r1
 8000564:	3304      	adds	r3, #4
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	e00c      	b.n	8000584 <SCH_update+0x8c>
				else ;
			}
			else
				SCH_tasks_G[id].delay -= 1;
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	4a0c      	ldr	r2, [pc, #48]	; (80005a0 <SCH_update+0xa8>)
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	4413      	add	r3, r2
 8000572:	3304      	adds	r3, #4
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	3a01      	subs	r2, #1
 800057a:	4909      	ldr	r1, [pc, #36]	; (80005a0 <SCH_update+0xa8>)
 800057c:	011b      	lsls	r3, r3, #4
 800057e:	440b      	add	r3, r1
 8000580:	3304      	adds	r3, #4
 8000582:	601a      	str	r2, [r3, #0]
	for (id=0; id<currentID; id++) {
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	3301      	adds	r3, #1
 8000588:	71fb      	strb	r3, [r7, #7]
 800058a:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <SCH_update+0xac>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	79fa      	ldrb	r2, [r7, #7]
 8000590:	429a      	cmp	r2, r3
 8000592:	d3b7      	bcc.n	8000504 <SCH_update+0xc>
		}
	}
}
 8000594:	bf00      	nop
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr
 80005a0:	2000012c 	.word	0x2000012c
 80005a4:	200003ac 	.word	0x200003ac

080005a8 <SCH_add_task>:

uint8_t SCH_add_task(void (*pFunction)(), unsigned int DELAY, unsigned int PERIOD) {
 80005a8:	b480      	push	{r7}
 80005aa:	b087      	sub	sp, #28
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
	uint8_t id = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	75fb      	strb	r3, [r7, #23]
	while ( (SCH_tasks_G[id].pTask != 0) && (id < SCH_MAX_TASKS) )
 80005b8:	e002      	b.n	80005c0 <SCH_add_task+0x18>
		id++;
 80005ba:	7dfb      	ldrb	r3, [r7, #23]
 80005bc:	3301      	adds	r3, #1
 80005be:	75fb      	strb	r3, [r7, #23]
	while ( (SCH_tasks_G[id].pTask != 0) && (id < SCH_MAX_TASKS) )
 80005c0:	7dfb      	ldrb	r3, [r7, #23]
 80005c2:	4a1f      	ldr	r2, [pc, #124]	; (8000640 <SCH_add_task+0x98>)
 80005c4:	011b      	lsls	r3, r3, #4
 80005c6:	4413      	add	r3, r2
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d002      	beq.n	80005d4 <SCH_add_task+0x2c>
 80005ce:	7dfb      	ldrb	r3, [r7, #23]
 80005d0:	2b27      	cmp	r3, #39	; 0x27
 80005d2:	d9f2      	bls.n	80005ba <SCH_add_task+0x12>
	if (id==SCH_MAX_TASKS)
 80005d4:	7dfb      	ldrb	r3, [r7, #23]
 80005d6:	2b28      	cmp	r3, #40	; 0x28
 80005d8:	d101      	bne.n	80005de <SCH_add_task+0x36>
		return SCH_MAX_TASKS;
 80005da:	2328      	movs	r3, #40	; 0x28
 80005dc:	e02a      	b.n	8000634 <SCH_add_task+0x8c>
	SCH_tasks_G[id].pTask = pFunction;
 80005de:	7dfb      	ldrb	r3, [r7, #23]
 80005e0:	4a17      	ldr	r2, [pc, #92]	; (8000640 <SCH_add_task+0x98>)
 80005e2:	011b      	lsls	r3, r3, #4
 80005e4:	4413      	add	r3, r2
 80005e6:	68fa      	ldr	r2, [r7, #12]
 80005e8:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[id].delay = DELAY;
 80005ea:	7dfb      	ldrb	r3, [r7, #23]
 80005ec:	4a14      	ldr	r2, [pc, #80]	; (8000640 <SCH_add_task+0x98>)
 80005ee:	011b      	lsls	r3, r3, #4
 80005f0:	4413      	add	r3, r2
 80005f2:	3304      	adds	r3, #4
 80005f4:	68ba      	ldr	r2, [r7, #8]
 80005f6:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[id].period = PERIOD;
 80005f8:	7dfb      	ldrb	r3, [r7, #23]
 80005fa:	4a11      	ldr	r2, [pc, #68]	; (8000640 <SCH_add_task+0x98>)
 80005fc:	011b      	lsls	r3, r3, #4
 80005fe:	4413      	add	r3, r2
 8000600:	3308      	adds	r3, #8
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[id].runMe = 0;
 8000606:	7dfb      	ldrb	r3, [r7, #23]
 8000608:	4a0d      	ldr	r2, [pc, #52]	; (8000640 <SCH_add_task+0x98>)
 800060a:	011b      	lsls	r3, r3, #4
 800060c:	4413      	add	r3, r2
 800060e:	330c      	adds	r3, #12
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G[id].taskID = currentID;
 8000614:	7dfb      	ldrb	r3, [r7, #23]
 8000616:	4a0b      	ldr	r2, [pc, #44]	; (8000644 <SCH_add_task+0x9c>)
 8000618:	7811      	ldrb	r1, [r2, #0]
 800061a:	4a09      	ldr	r2, [pc, #36]	; (8000640 <SCH_add_task+0x98>)
 800061c:	011b      	lsls	r3, r3, #4
 800061e:	4413      	add	r3, r2
 8000620:	330d      	adds	r3, #13
 8000622:	460a      	mov	r2, r1
 8000624:	701a      	strb	r2, [r3, #0]
	currentID += 1;
 8000626:	4b07      	ldr	r3, [pc, #28]	; (8000644 <SCH_add_task+0x9c>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	3301      	adds	r3, #1
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4b05      	ldr	r3, [pc, #20]	; (8000644 <SCH_add_task+0x9c>)
 8000630:	701a      	strb	r2, [r3, #0]
	return id;
 8000632:	7dfb      	ldrb	r3, [r7, #23]
}
 8000634:	4618      	mov	r0, r3
 8000636:	371c      	adds	r7, #28
 8000638:	46bd      	mov	sp, r7
 800063a:	bc80      	pop	{r7}
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	2000012c 	.word	0x2000012c
 8000644:	200003ac 	.word	0x200003ac

08000648 <SCH_dispatch_tasks>:

void SCH_dispatch_tasks(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
	uint8_t id;
	for (id = 0; id<currentID; id++) {
 800064e:	2300      	movs	r3, #0
 8000650:	71fb      	strb	r3, [r7, #7]
 8000652:	e02b      	b.n	80006ac <SCH_dispatch_tasks+0x64>
		if (SCH_tasks_G[id].runMe>0) {
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	4a1a      	ldr	r2, [pc, #104]	; (80006c0 <SCH_dispatch_tasks+0x78>)
 8000658:	011b      	lsls	r3, r3, #4
 800065a:	4413      	add	r3, r2
 800065c:	330c      	adds	r3, #12
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d020      	beq.n	80006a6 <SCH_dispatch_tasks+0x5e>
			(*SCH_tasks_G[id].pTask)();
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	4a16      	ldr	r2, [pc, #88]	; (80006c0 <SCH_dispatch_tasks+0x78>)
 8000668:	011b      	lsls	r3, r3, #4
 800066a:	4413      	add	r3, r2
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4798      	blx	r3
			SCH_tasks_G[id].runMe -= 1;
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	4a13      	ldr	r2, [pc, #76]	; (80006c0 <SCH_dispatch_tasks+0x78>)
 8000674:	011b      	lsls	r3, r3, #4
 8000676:	4413      	add	r3, r2
 8000678:	330c      	adds	r3, #12
 800067a:	781a      	ldrb	r2, [r3, #0]
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	3a01      	subs	r2, #1
 8000680:	b2d1      	uxtb	r1, r2
 8000682:	4a0f      	ldr	r2, [pc, #60]	; (80006c0 <SCH_dispatch_tasks+0x78>)
 8000684:	011b      	lsls	r3, r3, #4
 8000686:	4413      	add	r3, r2
 8000688:	330c      	adds	r3, #12
 800068a:	460a      	mov	r2, r1
 800068c:	701a      	strb	r2, [r3, #0]
			if (SCH_tasks_G[id].period==0)
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	4a0b      	ldr	r2, [pc, #44]	; (80006c0 <SCH_dispatch_tasks+0x78>)
 8000692:	011b      	lsls	r3, r3, #4
 8000694:	4413      	add	r3, r2
 8000696:	3308      	adds	r3, #8
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d103      	bne.n	80006a6 <SCH_dispatch_tasks+0x5e>
				SCH_delete_task(id);
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 f811 	bl	80006c8 <SCH_delete_task>
	for (id = 0; id<currentID; id++) {
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	3301      	adds	r3, #1
 80006aa:	71fb      	strb	r3, [r7, #7]
 80006ac:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <SCH_dispatch_tasks+0x7c>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	79fa      	ldrb	r2, [r7, #7]
 80006b2:	429a      	cmp	r2, r3
 80006b4:	d3ce      	bcc.n	8000654 <SCH_dispatch_tasks+0xc>
		}
	}
}
 80006b6:	bf00      	nop
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	2000012c 	.word	0x2000012c
 80006c4:	200003ac 	.word	0x200003ac

080006c8 <SCH_delete_task>:

uint8_t SCH_delete_task(const uint8_t ID) {
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
	if (ID>currentID)
 80006d2:	4b21      	ldr	r3, [pc, #132]	; (8000758 <SCH_delete_task+0x90>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	79fa      	ldrb	r2, [r7, #7]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d901      	bls.n	80006e0 <SCH_delete_task+0x18>
		return ID;
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	e036      	b.n	800074e <SCH_delete_task+0x86>
	SCH_tasks_G[ID].delay = 0;
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	4a1e      	ldr	r2, [pc, #120]	; (800075c <SCH_delete_task+0x94>)
 80006e4:	011b      	lsls	r3, r3, #4
 80006e6:	4413      	add	r3, r2
 80006e8:	3304      	adds	r3, #4
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[ID].pTask = 0x0000;
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	4a1a      	ldr	r2, [pc, #104]	; (800075c <SCH_delete_task+0x94>)
 80006f2:	011b      	lsls	r3, r3, #4
 80006f4:	4413      	add	r3, r2
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[ID].delay = 0;
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	4a17      	ldr	r2, [pc, #92]	; (800075c <SCH_delete_task+0x94>)
 80006fe:	011b      	lsls	r3, r3, #4
 8000700:	4413      	add	r3, r2
 8000702:	3304      	adds	r3, #4
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[ID].runMe = 0;
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	4a14      	ldr	r2, [pc, #80]	; (800075c <SCH_delete_task+0x94>)
 800070c:	011b      	lsls	r3, r3, #4
 800070e:	4413      	add	r3, r2
 8000710:	330c      	adds	r3, #12
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
	for (uint8_t id = ID+1; id<currentID; id++)
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	3301      	adds	r3, #1
 800071a:	73fb      	strb	r3, [r7, #15]
 800071c:	e011      	b.n	8000742 <SCH_delete_task+0x7a>
		SCH_tasks_G[id].taskID -= 1;
 800071e:	7bfb      	ldrb	r3, [r7, #15]
 8000720:	4a0e      	ldr	r2, [pc, #56]	; (800075c <SCH_delete_task+0x94>)
 8000722:	011b      	lsls	r3, r3, #4
 8000724:	4413      	add	r3, r2
 8000726:	330d      	adds	r3, #13
 8000728:	781a      	ldrb	r2, [r3, #0]
 800072a:	7bfb      	ldrb	r3, [r7, #15]
 800072c:	3a01      	subs	r2, #1
 800072e:	b2d1      	uxtb	r1, r2
 8000730:	4a0a      	ldr	r2, [pc, #40]	; (800075c <SCH_delete_task+0x94>)
 8000732:	011b      	lsls	r3, r3, #4
 8000734:	4413      	add	r3, r2
 8000736:	330d      	adds	r3, #13
 8000738:	460a      	mov	r2, r1
 800073a:	701a      	strb	r2, [r3, #0]
	for (uint8_t id = ID+1; id<currentID; id++)
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	3301      	adds	r3, #1
 8000740:	73fb      	strb	r3, [r7, #15]
 8000742:	4b05      	ldr	r3, [pc, #20]	; (8000758 <SCH_delete_task+0x90>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	7bfa      	ldrb	r2, [r7, #15]
 8000748:	429a      	cmp	r2, r3
 800074a:	d3e8      	bcc.n	800071e <SCH_delete_task+0x56>
	return ID;
 800074c:	79fb      	ldrb	r3, [r7, #7]
}
 800074e:	4618      	mov	r0, r3
 8000750:	3714      	adds	r7, #20
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	200003ac 	.word	0x200003ac
 800075c:	2000012c 	.word	0x2000012c

08000760 <set_timer>:

uint32_t time;
int timerFlag = 0;
int timerCounter = 0;

void set_timer(int duration) {
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	timerCounter = duration/TICK;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4a08      	ldr	r2, [pc, #32]	; (800078c <set_timer+0x2c>)
 800076c:	fb82 1203 	smull	r1, r2, r2, r3
 8000770:	1092      	asrs	r2, r2, #2
 8000772:	17db      	asrs	r3, r3, #31
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	4a06      	ldr	r2, [pc, #24]	; (8000790 <set_timer+0x30>)
 8000778:	6013      	str	r3, [r2, #0]
	timerFlag = 0;
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <set_timer+0x34>)
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
}
 8000780:	bf00      	nop
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	66666667 	.word	0x66666667
 8000790:	200003b8 	.word	0x200003b8
 8000794:	200003b4 	.word	0x200003b4

08000798 <timer_run>:

void timer_run() {
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
	time++;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <timer_run+0x38>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	3301      	adds	r3, #1
 80007a2:	4a0b      	ldr	r2, [pc, #44]	; (80007d0 <timer_run+0x38>)
 80007a4:	6013      	str	r3, [r2, #0]
	if (timerCounter>0) {
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <timer_run+0x3c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	dd0b      	ble.n	80007c6 <timer_run+0x2e>
		timerCounter--;
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <timer_run+0x3c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	4a07      	ldr	r2, [pc, #28]	; (80007d4 <timer_run+0x3c>)
 80007b6:	6013      	str	r3, [r2, #0]
		if (timerCounter==0)
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <timer_run+0x3c>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d102      	bne.n	80007c6 <timer_run+0x2e>
			timerFlag = 1;
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <timer_run+0x40>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	601a      	str	r2, [r3, #0]
	}
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	200003b0 	.word	0x200003b0
 80007d4:	200003b8 	.word	0x200003b8
 80007d8:	200003b4 	.word	0x200003b4

080007dc <timer_init>:

void timer_init() {
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
	time = 0;
 80007e0:	4b03      	ldr	r3, [pc, #12]	; (80007f0 <timer_init+0x14>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	200003b0 	.word	0x200003b0

080007f4 <get_timer>:

unsigned int get_timer() {
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
	return time;
 80007f8:	4b02      	ldr	r3, [pc, #8]	; (8000804 <get_timer+0x10>)
 80007fa:	681b      	ldr	r3, [r3, #0]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr
 8000804:	200003b0 	.word	0x200003b0

08000808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <HAL_MspInit+0x40>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	4a0d      	ldr	r2, [pc, #52]	; (8000848 <HAL_MspInit+0x40>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6193      	str	r3, [r2, #24]
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <HAL_MspInit+0x40>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <HAL_MspInit+0x40>)
 8000828:	69db      	ldr	r3, [r3, #28]
 800082a:	4a07      	ldr	r2, [pc, #28]	; (8000848 <HAL_MspInit+0x40>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000830:	61d3      	str	r3, [r2, #28]
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <HAL_MspInit+0x40>)
 8000834:	69db      	ldr	r3, [r3, #28]
 8000836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr
 8000848:	40021000 	.word	0x40021000

0800084c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800085c:	d113      	bne.n	8000886 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <HAL_TIM_Base_MspInit+0x44>)
 8000860:	69db      	ldr	r3, [r3, #28]
 8000862:	4a0b      	ldr	r2, [pc, #44]	; (8000890 <HAL_TIM_Base_MspInit+0x44>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	61d3      	str	r3, [r2, #28]
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <HAL_TIM_Base_MspInit+0x44>)
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2100      	movs	r1, #0
 800087a:	201c      	movs	r0, #28
 800087c:	f000 fad1 	bl	8000e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000880:	201c      	movs	r0, #28
 8000882:	f000 faea 	bl	8000e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40021000 	.word	0x40021000

08000894 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 0310 	add.w	r3, r7, #16
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a1c      	ldr	r2, [pc, #112]	; (8000920 <HAL_UART_MspInit+0x8c>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d131      	bne.n	8000918 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008b4:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <HAL_UART_MspInit+0x90>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	4a1a      	ldr	r2, [pc, #104]	; (8000924 <HAL_UART_MspInit+0x90>)
 80008ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008be:	6193      	str	r3, [r2, #24]
 80008c0:	4b18      	ldr	r3, [pc, #96]	; (8000924 <HAL_UART_MspInit+0x90>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008cc:	4b15      	ldr	r3, [pc, #84]	; (8000924 <HAL_UART_MspInit+0x90>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	4a14      	ldr	r2, [pc, #80]	; (8000924 <HAL_UART_MspInit+0x90>)
 80008d2:	f043 0304 	orr.w	r3, r3, #4
 80008d6:	6193      	str	r3, [r2, #24]
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <HAL_UART_MspInit+0x90>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f003 0304 	and.w	r3, r3, #4
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ee:	2303      	movs	r3, #3
 80008f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f2:	f107 0310 	add.w	r3, r7, #16
 80008f6:	4619      	mov	r1, r3
 80008f8:	480b      	ldr	r0, [pc, #44]	; (8000928 <HAL_UART_MspInit+0x94>)
 80008fa:	f000 fac9 	bl	8000e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000902:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	4619      	mov	r1, r3
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <HAL_UART_MspInit+0x94>)
 8000914:	f000 fabc 	bl	8000e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000918:	bf00      	nop
 800091a:	3720      	adds	r7, #32
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40013800 	.word	0x40013800
 8000924:	40021000 	.word	0x40021000
 8000928:	40010800 	.word	0x40010800

0800092c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <NMI_Handler+0x4>

08000932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <HardFault_Handler+0x4>

08000938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <MemManage_Handler+0x4>

0800093e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <BusFault_Handler+0x4>

08000944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <UsageFault_Handler+0x4>

0800094a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr

08000956 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr

08000962 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr

0800096e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000972:	f000 f963 	bl	8000c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000980:	4802      	ldr	r0, [pc, #8]	; (800098c <TIM2_IRQHandler+0x10>)
 8000982:	f001 f8e9 	bl	8001b58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	200000a0 	.word	0x200000a0

08000990 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000998:	4a14      	ldr	r2, [pc, #80]	; (80009ec <_sbrk+0x5c>)
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <_sbrk+0x60>)
 800099c:	1ad3      	subs	r3, r2, r3
 800099e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009a4:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <_sbrk+0x64>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d102      	bne.n	80009b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <_sbrk+0x64>)
 80009ae:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <_sbrk+0x68>)
 80009b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <_sbrk+0x64>)
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4413      	add	r3, r2
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d207      	bcs.n	80009d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009c0:	f001 fdca 	bl	8002558 <__errno>
 80009c4:	4603      	mov	r3, r0
 80009c6:	220c      	movs	r2, #12
 80009c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ca:	f04f 33ff 	mov.w	r3, #4294967295
 80009ce:	e009      	b.n	80009e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <_sbrk+0x64>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009d6:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <_sbrk+0x64>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	4a05      	ldr	r2, [pc, #20]	; (80009f4 <_sbrk+0x64>)
 80009e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009e2:	68fb      	ldr	r3, [r7, #12]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3718      	adds	r7, #24
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20002800 	.word	0x20002800
 80009f0:	00000400 	.word	0x00000400
 80009f4:	200003bc 	.word	0x200003bc
 80009f8:	200003d8 	.word	0x200003d8

080009fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr

08000a08 <led1_toggle>:
#include "tasks.h"
#include "main.h"
#include "software_timer.h"
#include "led.h"

void led1_toggle() {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, LED1_Pin);
 8000a0c:	2108      	movs	r1, #8
 8000a0e:	4802      	ldr	r0, [pc, #8]	; (8000a18 <led1_toggle+0x10>)
 8000a10:	f000 fbd2 	bl	80011b8 <HAL_GPIO_TogglePin>
}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40010800 	.word	0x40010800

08000a1c <led2_toggle>:

void led2_toggle() {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, LED2_Pin);
 8000a20:	2110      	movs	r1, #16
 8000a22:	4802      	ldr	r0, [pc, #8]	; (8000a2c <led2_toggle+0x10>)
 8000a24:	f000 fbc8 	bl	80011b8 <HAL_GPIO_TogglePin>
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40010800 	.word	0x40010800

08000a30 <led3_toggle>:

void led3_toggle() {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, LED3_Pin);
 8000a34:	2120      	movs	r1, #32
 8000a36:	4802      	ldr	r0, [pc, #8]	; (8000a40 <led3_toggle+0x10>)
 8000a38:	f000 fbbe 	bl	80011b8 <HAL_GPIO_TogglePin>
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40010800 	.word	0x40010800

08000a44 <led4_toggle>:

void led4_toggle() {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, LED4_Pin);
 8000a48:	2140      	movs	r1, #64	; 0x40
 8000a4a:	4802      	ldr	r0, [pc, #8]	; (8000a54 <led4_toggle+0x10>)
 8000a4c:	f000 fbb4 	bl	80011b8 <HAL_GPIO_TogglePin>
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40010800 	.word	0x40010800

08000a58 <led5_toggle>:

void led5_toggle() {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, LED5_Pin);
 8000a5c:	2180      	movs	r1, #128	; 0x80
 8000a5e:	4802      	ldr	r0, [pc, #8]	; (8000a68 <led5_toggle+0x10>)
 8000a60:	f000 fbaa 	bl	80011b8 <HAL_GPIO_TogglePin>
}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40010800 	.word	0x40010800

08000a6c <led6_toggle>:

void led6_toggle() {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, LED6_Pin);
 8000a70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <led6_toggle+0x14>)
 8000a76:	f000 fb9f 	bl	80011b8 <HAL_GPIO_TogglePin>
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40010800 	.word	0x40010800

08000a84 <display_timer>:

void display_timer() {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
	uint32_t value = get_timer();
 8000a8a:	f7ff feb3 	bl	80007f4 <get_timer>
 8000a8e:	6078      	str	r0, [r7, #4]
	value = value/50;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a0f      	ldr	r2, [pc, #60]	; (8000ad0 <display_timer+0x4c>)
 8000a94:	fba2 2303 	umull	r2, r3, r2, r3
 8000a98:	091b      	lsrs	r3, r3, #4
 8000a9a:	607b      	str	r3, [r7, #4]
	display_7SEG1(value/10);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a0d      	ldr	r2, [pc, #52]	; (8000ad4 <display_timer+0x50>)
 8000aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa4:	08db      	lsrs	r3, r3, #3
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fb6c 	bl	8000184 <display_7SEG1>
	display_7SEG2(value%10);
 8000aac:	6879      	ldr	r1, [r7, #4]
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <display_timer+0x50>)
 8000ab0:	fba3 2301 	umull	r2, r3, r3, r1
 8000ab4:	08da      	lsrs	r2, r3, #3
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	4413      	add	r3, r2
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	1aca      	subs	r2, r1, r3
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fb78 	bl	80001b8 <display_7SEG2>
}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	51eb851f 	.word	0x51eb851f
 8000ad4:	cccccccd 	.word	0xcccccccd

08000ad8 <init_tasks>:

void init_tasks() {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b088      	sub	sp, #32
 8000adc:	af00      	add	r7, sp, #0
	void (*pTask2)(void);
	void (*pTask3)(void);
	void (*pTask4)(void);
	void (*pTask5)(void);
	void (*pTask6)(void);
	ptask0 = display_timer;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <init_tasks+0x70>)
 8000ae0:	61fb      	str	r3, [r7, #28]
	pTask1 = led1_toggle;
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <init_tasks+0x74>)
 8000ae4:	61bb      	str	r3, [r7, #24]
	pTask2 = led2_toggle;
 8000ae6:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <init_tasks+0x78>)
 8000ae8:	617b      	str	r3, [r7, #20]
	pTask3 = led3_toggle;
 8000aea:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <init_tasks+0x7c>)
 8000aec:	613b      	str	r3, [r7, #16]
	pTask4 = led4_toggle;
 8000aee:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <init_tasks+0x80>)
 8000af0:	60fb      	str	r3, [r7, #12]
	pTask5 = led5_toggle;
 8000af2:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <init_tasks+0x84>)
 8000af4:	60bb      	str	r3, [r7, #8]
	pTask6 = led6_toggle;
 8000af6:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <init_tasks+0x88>)
 8000af8:	607b      	str	r3, [r7, #4]
	SCH_add_task(ptask0, 0, 50);
 8000afa:	2232      	movs	r2, #50	; 0x32
 8000afc:	2100      	movs	r1, #0
 8000afe:	69f8      	ldr	r0, [r7, #28]
 8000b00:	f7ff fd52 	bl	80005a8 <SCH_add_task>
	SCH_add_task(pTask1, 5, 50);
 8000b04:	2232      	movs	r2, #50	; 0x32
 8000b06:	2105      	movs	r1, #5
 8000b08:	69b8      	ldr	r0, [r7, #24]
 8000b0a:	f7ff fd4d 	bl	80005a8 <SCH_add_task>
	SCH_add_task(pTask2, 10, 100);
 8000b0e:	2264      	movs	r2, #100	; 0x64
 8000b10:	210a      	movs	r1, #10
 8000b12:	6978      	ldr	r0, [r7, #20]
 8000b14:	f7ff fd48 	bl	80005a8 <SCH_add_task>
	SCH_add_task(pTask3, 15, 150);
 8000b18:	2296      	movs	r2, #150	; 0x96
 8000b1a:	210f      	movs	r1, #15
 8000b1c:	6938      	ldr	r0, [r7, #16]
 8000b1e:	f7ff fd43 	bl	80005a8 <SCH_add_task>
	SCH_add_task(pTask4, 20, 200);
 8000b22:	22c8      	movs	r2, #200	; 0xc8
 8000b24:	2114      	movs	r1, #20
 8000b26:	68f8      	ldr	r0, [r7, #12]
 8000b28:	f7ff fd3e 	bl	80005a8 <SCH_add_task>
	SCH_add_task(pTask5, 25, 250);
 8000b2c:	22fa      	movs	r2, #250	; 0xfa
 8000b2e:	2119      	movs	r1, #25
 8000b30:	68b8      	ldr	r0, [r7, #8]
 8000b32:	f7ff fd39 	bl	80005a8 <SCH_add_task>
	SCH_add_task(pTask6, 30, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	211e      	movs	r1, #30
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f7ff fd34 	bl	80005a8 <SCH_add_task>
}
 8000b40:	bf00      	nop
 8000b42:	3720      	adds	r7, #32
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	08000a85 	.word	0x08000a85
 8000b4c:	08000a09 	.word	0x08000a09
 8000b50:	08000a1d 	.word	0x08000a1d
 8000b54:	08000a31 	.word	0x08000a31
 8000b58:	08000a45 	.word	0x08000a45
 8000b5c:	08000a59 	.word	0x08000a59
 8000b60:	08000a6d 	.word	0x08000a6d

08000b64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b64:	480c      	ldr	r0, [pc, #48]	; (8000b98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b66:	490d      	ldr	r1, [pc, #52]	; (8000b9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b68:	4a0d      	ldr	r2, [pc, #52]	; (8000ba0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b6c:	e002      	b.n	8000b74 <LoopCopyDataInit>

08000b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b72:	3304      	adds	r3, #4

08000b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b78:	d3f9      	bcc.n	8000b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b7c:	4c0a      	ldr	r4, [pc, #40]	; (8000ba8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b80:	e001      	b.n	8000b86 <LoopFillZerobss>

08000b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b84:	3204      	adds	r2, #4

08000b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b88:	d3fb      	bcc.n	8000b82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b8a:	f7ff ff37 	bl	80009fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f001 fce9 	bl	8002564 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b92:	f7ff fb33 	bl	80001fc <main>
  bx lr
 8000b96:	4770      	bx	lr
  ldr r0, =_sdata
 8000b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b9c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000ba0:	08002f34 	.word	0x08002f34
  ldr r2, =_sbss
 8000ba4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000ba8:	200003d4 	.word	0x200003d4

08000bac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bac:	e7fe      	b.n	8000bac <ADC1_2_IRQHandler>
	...

08000bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <HAL_Init+0x28>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a07      	ldr	r2, [pc, #28]	; (8000bd8 <HAL_Init+0x28>)
 8000bba:	f043 0310 	orr.w	r3, r3, #16
 8000bbe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc0:	2003      	movs	r0, #3
 8000bc2:	f000 f923 	bl	8000e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bc6:	200f      	movs	r0, #15
 8000bc8:	f000 f808 	bl	8000bdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bcc:	f7ff fe1c 	bl	8000808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40022000 	.word	0x40022000

08000bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <HAL_InitTick+0x54>)
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <HAL_InitTick+0x58>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	4619      	mov	r1, r3
 8000bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 f93b 	bl	8000e76 <HAL_SYSTICK_Config>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	e00e      	b.n	8000c28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2b0f      	cmp	r3, #15
 8000c0e:	d80a      	bhi.n	8000c26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c10:	2200      	movs	r2, #0
 8000c12:	6879      	ldr	r1, [r7, #4]
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	f000 f903 	bl	8000e22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c1c:	4a06      	ldr	r2, [pc, #24]	; (8000c38 <HAL_InitTick+0x5c>)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c22:	2300      	movs	r3, #0
 8000c24:	e000      	b.n	8000c28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000014 	.word	0x20000014
 8000c34:	2000001c 	.word	0x2000001c
 8000c38:	20000018 	.word	0x20000018

08000c3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <HAL_IncTick+0x1c>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	461a      	mov	r2, r3
 8000c46:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <HAL_IncTick+0x20>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	4a03      	ldr	r2, [pc, #12]	; (8000c5c <HAL_IncTick+0x20>)
 8000c4e:	6013      	str	r3, [r2, #0]
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr
 8000c58:	2000001c 	.word	0x2000001c
 8000c5c:	200003c0 	.word	0x200003c0

08000c60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return uwTick;
 8000c64:	4b02      	ldr	r3, [pc, #8]	; (8000c70 <HAL_GetTick+0x10>)
 8000c66:	681b      	ldr	r3, [r3, #0]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr
 8000c70:	200003c0 	.word	0x200003c0

08000c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c90:	4013      	ands	r3, r2
 8000c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca6:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	60d3      	str	r3, [r2, #12]
}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	f003 0307 	and.w	r3, r3, #7
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db0b      	blt.n	8000d02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	f003 021f 	and.w	r2, r3, #31
 8000cf0:	4906      	ldr	r1, [pc, #24]	; (8000d0c <__NVIC_EnableIRQ+0x34>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	095b      	lsrs	r3, r3, #5
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	e000e100 	.word	0xe000e100

08000d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db0a      	blt.n	8000d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	490c      	ldr	r1, [pc, #48]	; (8000d5c <__NVIC_SetPriority+0x4c>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	440b      	add	r3, r1
 8000d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d38:	e00a      	b.n	8000d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4908      	ldr	r1, [pc, #32]	; (8000d60 <__NVIC_SetPriority+0x50>)
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	f003 030f 	and.w	r3, r3, #15
 8000d46:	3b04      	subs	r3, #4
 8000d48:	0112      	lsls	r2, r2, #4
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	761a      	strb	r2, [r3, #24]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000e100 	.word	0xe000e100
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	; 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f1c3 0307 	rsb	r3, r3, #7
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	bf28      	it	cs
 8000d82:	2304      	movcs	r3, #4
 8000d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	2b06      	cmp	r3, #6
 8000d8c:	d902      	bls.n	8000d94 <NVIC_EncodePriority+0x30>
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3b03      	subs	r3, #3
 8000d92:	e000      	b.n	8000d96 <NVIC_EncodePriority+0x32>
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	f04f 32ff 	mov.w	r2, #4294967295
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43da      	mvns	r2, r3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	401a      	ands	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	43d9      	mvns	r1, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	4313      	orrs	r3, r2
         );
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3724      	adds	r7, #36	; 0x24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr

08000dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd8:	d301      	bcc.n	8000dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e00f      	b.n	8000dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dde:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <SysTick_Config+0x40>)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000de6:	210f      	movs	r1, #15
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dec:	f7ff ff90 	bl	8000d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <SysTick_Config+0x40>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000df6:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <SysTick_Config+0x40>)
 8000df8:	2207      	movs	r2, #7
 8000dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	e000e010 	.word	0xe000e010

08000e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff ff2d 	bl	8000c74 <__NVIC_SetPriorityGrouping>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b086      	sub	sp, #24
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	4603      	mov	r3, r0
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
 8000e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e34:	f7ff ff42 	bl	8000cbc <__NVIC_GetPriorityGrouping>
 8000e38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	68b9      	ldr	r1, [r7, #8]
 8000e3e:	6978      	ldr	r0, [r7, #20]
 8000e40:	f7ff ff90 	bl	8000d64 <NVIC_EncodePriority>
 8000e44:	4602      	mov	r2, r0
 8000e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff5f 	bl	8000d10 <__NVIC_SetPriority>
}
 8000e52:	bf00      	nop
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4603      	mov	r3, r0
 8000e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff35 	bl	8000cd8 <__NVIC_EnableIRQ>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ffa2 	bl	8000dc8 <SysTick_Config>
 8000e84:	4603      	mov	r3, r0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b08b      	sub	sp, #44	; 0x2c
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea2:	e161      	b.n	8001168 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	69fa      	ldr	r2, [r7, #28]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	f040 8150 	bne.w	8001162 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	4a97      	ldr	r2, [pc, #604]	; (8001124 <HAL_GPIO_Init+0x294>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d05e      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
 8000ecc:	4a95      	ldr	r2, [pc, #596]	; (8001124 <HAL_GPIO_Init+0x294>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d875      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000ed2:	4a95      	ldr	r2, [pc, #596]	; (8001128 <HAL_GPIO_Init+0x298>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d058      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
 8000ed8:	4a93      	ldr	r2, [pc, #588]	; (8001128 <HAL_GPIO_Init+0x298>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d86f      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000ede:	4a93      	ldr	r2, [pc, #588]	; (800112c <HAL_GPIO_Init+0x29c>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d052      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
 8000ee4:	4a91      	ldr	r2, [pc, #580]	; (800112c <HAL_GPIO_Init+0x29c>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d869      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000eea:	4a91      	ldr	r2, [pc, #580]	; (8001130 <HAL_GPIO_Init+0x2a0>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d04c      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
 8000ef0:	4a8f      	ldr	r2, [pc, #572]	; (8001130 <HAL_GPIO_Init+0x2a0>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d863      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000ef6:	4a8f      	ldr	r2, [pc, #572]	; (8001134 <HAL_GPIO_Init+0x2a4>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d046      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
 8000efc:	4a8d      	ldr	r2, [pc, #564]	; (8001134 <HAL_GPIO_Init+0x2a4>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d85d      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000f02:	2b12      	cmp	r3, #18
 8000f04:	d82a      	bhi.n	8000f5c <HAL_GPIO_Init+0xcc>
 8000f06:	2b12      	cmp	r3, #18
 8000f08:	d859      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000f0a:	a201      	add	r2, pc, #4	; (adr r2, 8000f10 <HAL_GPIO_Init+0x80>)
 8000f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f10:	08000f8b 	.word	0x08000f8b
 8000f14:	08000f65 	.word	0x08000f65
 8000f18:	08000f77 	.word	0x08000f77
 8000f1c:	08000fb9 	.word	0x08000fb9
 8000f20:	08000fbf 	.word	0x08000fbf
 8000f24:	08000fbf 	.word	0x08000fbf
 8000f28:	08000fbf 	.word	0x08000fbf
 8000f2c:	08000fbf 	.word	0x08000fbf
 8000f30:	08000fbf 	.word	0x08000fbf
 8000f34:	08000fbf 	.word	0x08000fbf
 8000f38:	08000fbf 	.word	0x08000fbf
 8000f3c:	08000fbf 	.word	0x08000fbf
 8000f40:	08000fbf 	.word	0x08000fbf
 8000f44:	08000fbf 	.word	0x08000fbf
 8000f48:	08000fbf 	.word	0x08000fbf
 8000f4c:	08000fbf 	.word	0x08000fbf
 8000f50:	08000fbf 	.word	0x08000fbf
 8000f54:	08000f6d 	.word	0x08000f6d
 8000f58:	08000f81 	.word	0x08000f81
 8000f5c:	4a76      	ldr	r2, [pc, #472]	; (8001138 <HAL_GPIO_Init+0x2a8>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d013      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f62:	e02c      	b.n	8000fbe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	623b      	str	r3, [r7, #32]
          break;
 8000f6a:	e029      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	3304      	adds	r3, #4
 8000f72:	623b      	str	r3, [r7, #32]
          break;
 8000f74:	e024      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	3308      	adds	r3, #8
 8000f7c:	623b      	str	r3, [r7, #32]
          break;
 8000f7e:	e01f      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	330c      	adds	r3, #12
 8000f86:	623b      	str	r3, [r7, #32]
          break;
 8000f88:	e01a      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d102      	bne.n	8000f98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f92:	2304      	movs	r3, #4
 8000f94:	623b      	str	r3, [r7, #32]
          break;
 8000f96:	e013      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d105      	bne.n	8000fac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fa0:	2308      	movs	r3, #8
 8000fa2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	69fa      	ldr	r2, [r7, #28]
 8000fa8:	611a      	str	r2, [r3, #16]
          break;
 8000faa:	e009      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fac:	2308      	movs	r3, #8
 8000fae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	69fa      	ldr	r2, [r7, #28]
 8000fb4:	615a      	str	r2, [r3, #20]
          break;
 8000fb6:	e003      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	623b      	str	r3, [r7, #32]
          break;
 8000fbc:	e000      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          break;
 8000fbe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	2bff      	cmp	r3, #255	; 0xff
 8000fc4:	d801      	bhi.n	8000fca <HAL_GPIO_Init+0x13a>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	e001      	b.n	8000fce <HAL_GPIO_Init+0x13e>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	2bff      	cmp	r3, #255	; 0xff
 8000fd4:	d802      	bhi.n	8000fdc <HAL_GPIO_Init+0x14c>
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	e002      	b.n	8000fe2 <HAL_GPIO_Init+0x152>
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fde:	3b08      	subs	r3, #8
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	210f      	movs	r1, #15
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	6a39      	ldr	r1, [r7, #32]
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 80a9 	beq.w	8001162 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001010:	4b4a      	ldr	r3, [pc, #296]	; (800113c <HAL_GPIO_Init+0x2ac>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	4a49      	ldr	r2, [pc, #292]	; (800113c <HAL_GPIO_Init+0x2ac>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6193      	str	r3, [r2, #24]
 800101c:	4b47      	ldr	r3, [pc, #284]	; (800113c <HAL_GPIO_Init+0x2ac>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001028:	4a45      	ldr	r2, [pc, #276]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 800102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	3302      	adds	r3, #2
 8001030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001034:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	220f      	movs	r2, #15
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	4013      	ands	r3, r2
 800104a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a3d      	ldr	r2, [pc, #244]	; (8001144 <HAL_GPIO_Init+0x2b4>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d00d      	beq.n	8001070 <HAL_GPIO_Init+0x1e0>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a3c      	ldr	r2, [pc, #240]	; (8001148 <HAL_GPIO_Init+0x2b8>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d007      	beq.n	800106c <HAL_GPIO_Init+0x1dc>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a3b      	ldr	r2, [pc, #236]	; (800114c <HAL_GPIO_Init+0x2bc>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d101      	bne.n	8001068 <HAL_GPIO_Init+0x1d8>
 8001064:	2302      	movs	r3, #2
 8001066:	e004      	b.n	8001072 <HAL_GPIO_Init+0x1e2>
 8001068:	2303      	movs	r3, #3
 800106a:	e002      	b.n	8001072 <HAL_GPIO_Init+0x1e2>
 800106c:	2301      	movs	r3, #1
 800106e:	e000      	b.n	8001072 <HAL_GPIO_Init+0x1e2>
 8001070:	2300      	movs	r3, #0
 8001072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001074:	f002 0203 	and.w	r2, r2, #3
 8001078:	0092      	lsls	r2, r2, #2
 800107a:	4093      	lsls	r3, r2
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	4313      	orrs	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001082:	492f      	ldr	r1, [pc, #188]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 8001084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	3302      	adds	r3, #2
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d006      	beq.n	80010aa <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800109c:	4b2c      	ldr	r3, [pc, #176]	; (8001150 <HAL_GPIO_Init+0x2c0>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	492b      	ldr	r1, [pc, #172]	; (8001150 <HAL_GPIO_Init+0x2c0>)
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	600b      	str	r3, [r1, #0]
 80010a8:	e006      	b.n	80010b8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010aa:	4b29      	ldr	r3, [pc, #164]	; (8001150 <HAL_GPIO_Init+0x2c0>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	4927      	ldr	r1, [pc, #156]	; (8001150 <HAL_GPIO_Init+0x2c0>)
 80010b4:	4013      	ands	r3, r2
 80010b6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d006      	beq.n	80010d2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010c4:	4b22      	ldr	r3, [pc, #136]	; (8001150 <HAL_GPIO_Init+0x2c0>)
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	4921      	ldr	r1, [pc, #132]	; (8001150 <HAL_GPIO_Init+0x2c0>)
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	604b      	str	r3, [r1, #4]
 80010d0:	e006      	b.n	80010e0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010d2:	4b1f      	ldr	r3, [pc, #124]	; (8001150 <HAL_GPIO_Init+0x2c0>)
 80010d4:	685a      	ldr	r2, [r3, #4]
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	43db      	mvns	r3, r3
 80010da:	491d      	ldr	r1, [pc, #116]	; (8001150 <HAL_GPIO_Init+0x2c0>)
 80010dc:	4013      	ands	r3, r2
 80010de:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d006      	beq.n	80010fa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010ec:	4b18      	ldr	r3, [pc, #96]	; (8001150 <HAL_GPIO_Init+0x2c0>)
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	4917      	ldr	r1, [pc, #92]	; (8001150 <HAL_GPIO_Init+0x2c0>)
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	608b      	str	r3, [r1, #8]
 80010f8:	e006      	b.n	8001108 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <HAL_GPIO_Init+0x2c0>)
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	43db      	mvns	r3, r3
 8001102:	4913      	ldr	r1, [pc, #76]	; (8001150 <HAL_GPIO_Init+0x2c0>)
 8001104:	4013      	ands	r3, r2
 8001106:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d01f      	beq.n	8001154 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001114:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <HAL_GPIO_Init+0x2c0>)
 8001116:	68da      	ldr	r2, [r3, #12]
 8001118:	490d      	ldr	r1, [pc, #52]	; (8001150 <HAL_GPIO_Init+0x2c0>)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	4313      	orrs	r3, r2
 800111e:	60cb      	str	r3, [r1, #12]
 8001120:	e01f      	b.n	8001162 <HAL_GPIO_Init+0x2d2>
 8001122:	bf00      	nop
 8001124:	10320000 	.word	0x10320000
 8001128:	10310000 	.word	0x10310000
 800112c:	10220000 	.word	0x10220000
 8001130:	10210000 	.word	0x10210000
 8001134:	10120000 	.word	0x10120000
 8001138:	10110000 	.word	0x10110000
 800113c:	40021000 	.word	0x40021000
 8001140:	40010000 	.word	0x40010000
 8001144:	40010800 	.word	0x40010800
 8001148:	40010c00 	.word	0x40010c00
 800114c:	40011000 	.word	0x40011000
 8001150:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001154:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <HAL_GPIO_Init+0x2f4>)
 8001156:	68da      	ldr	r2, [r3, #12]
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	43db      	mvns	r3, r3
 800115c:	4909      	ldr	r1, [pc, #36]	; (8001184 <HAL_GPIO_Init+0x2f4>)
 800115e:	4013      	ands	r3, r2
 8001160:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001164:	3301      	adds	r3, #1
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116e:	fa22 f303 	lsr.w	r3, r2, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	f47f ae96 	bne.w	8000ea4 <HAL_GPIO_Init+0x14>
  }
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	372c      	adds	r7, #44	; 0x2c
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr
 8001184:	40010400 	.word	0x40010400

08001188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]
 8001194:	4613      	mov	r3, r2
 8001196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001198:	787b      	ldrb	r3, [r7, #1]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800119e:	887a      	ldrh	r2, [r7, #2]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011a4:	e003      	b.n	80011ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011a6:	887b      	ldrh	r3, [r7, #2]
 80011a8:	041a      	lsls	r2, r3, #16
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	611a      	str	r2, [r3, #16]
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr

080011b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011ca:	887a      	ldrh	r2, [r7, #2]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4013      	ands	r3, r2
 80011d0:	041a      	lsls	r2, r3, #16
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	43d9      	mvns	r1, r3
 80011d6:	887b      	ldrh	r3, [r7, #2]
 80011d8:	400b      	ands	r3, r1
 80011da:	431a      	orrs	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	611a      	str	r2, [r3, #16]
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
	...

080011ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e272      	b.n	80016e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b00      	cmp	r3, #0
 8001208:	f000 8087 	beq.w	800131a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800120c:	4b92      	ldr	r3, [pc, #584]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 030c 	and.w	r3, r3, #12
 8001214:	2b04      	cmp	r3, #4
 8001216:	d00c      	beq.n	8001232 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001218:	4b8f      	ldr	r3, [pc, #572]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 030c 	and.w	r3, r3, #12
 8001220:	2b08      	cmp	r3, #8
 8001222:	d112      	bne.n	800124a <HAL_RCC_OscConfig+0x5e>
 8001224:	4b8c      	ldr	r3, [pc, #560]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001230:	d10b      	bne.n	800124a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001232:	4b89      	ldr	r3, [pc, #548]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d06c      	beq.n	8001318 <HAL_RCC_OscConfig+0x12c>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d168      	bne.n	8001318 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e24c      	b.n	80016e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001252:	d106      	bne.n	8001262 <HAL_RCC_OscConfig+0x76>
 8001254:	4b80      	ldr	r3, [pc, #512]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a7f      	ldr	r2, [pc, #508]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 800125a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	e02e      	b.n	80012c0 <HAL_RCC_OscConfig+0xd4>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d10c      	bne.n	8001284 <HAL_RCC_OscConfig+0x98>
 800126a:	4b7b      	ldr	r3, [pc, #492]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a7a      	ldr	r2, [pc, #488]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001270:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	4b78      	ldr	r3, [pc, #480]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a77      	ldr	r2, [pc, #476]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 800127c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	e01d      	b.n	80012c0 <HAL_RCC_OscConfig+0xd4>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800128c:	d10c      	bne.n	80012a8 <HAL_RCC_OscConfig+0xbc>
 800128e:	4b72      	ldr	r3, [pc, #456]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a71      	ldr	r2, [pc, #452]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001294:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	4b6f      	ldr	r3, [pc, #444]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a6e      	ldr	r2, [pc, #440]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e00b      	b.n	80012c0 <HAL_RCC_OscConfig+0xd4>
 80012a8:	4b6b      	ldr	r3, [pc, #428]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a6a      	ldr	r2, [pc, #424]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 80012ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	4b68      	ldr	r3, [pc, #416]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a67      	ldr	r2, [pc, #412]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 80012ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d013      	beq.n	80012f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c8:	f7ff fcca 	bl	8000c60 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d0:	f7ff fcc6 	bl	8000c60 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b64      	cmp	r3, #100	; 0x64
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e200      	b.n	80016e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e2:	4b5d      	ldr	r3, [pc, #372]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f0      	beq.n	80012d0 <HAL_RCC_OscConfig+0xe4>
 80012ee:	e014      	b.n	800131a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f0:	f7ff fcb6 	bl	8000c60 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f8:	f7ff fcb2 	bl	8000c60 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b64      	cmp	r3, #100	; 0x64
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e1ec      	b.n	80016e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130a:	4b53      	ldr	r3, [pc, #332]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f0      	bne.n	80012f8 <HAL_RCC_OscConfig+0x10c>
 8001316:	e000      	b.n	800131a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d063      	beq.n	80013ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001326:	4b4c      	ldr	r3, [pc, #304]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 030c 	and.w	r3, r3, #12
 800132e:	2b00      	cmp	r3, #0
 8001330:	d00b      	beq.n	800134a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001332:	4b49      	ldr	r3, [pc, #292]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 030c 	and.w	r3, r3, #12
 800133a:	2b08      	cmp	r3, #8
 800133c:	d11c      	bne.n	8001378 <HAL_RCC_OscConfig+0x18c>
 800133e:	4b46      	ldr	r3, [pc, #280]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d116      	bne.n	8001378 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800134a:	4b43      	ldr	r3, [pc, #268]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d005      	beq.n	8001362 <HAL_RCC_OscConfig+0x176>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d001      	beq.n	8001362 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e1c0      	b.n	80016e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001362:	4b3d      	ldr	r3, [pc, #244]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	4939      	ldr	r1, [pc, #228]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001372:	4313      	orrs	r3, r2
 8001374:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001376:	e03a      	b.n	80013ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d020      	beq.n	80013c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001380:	4b36      	ldr	r3, [pc, #216]	; (800145c <HAL_RCC_OscConfig+0x270>)
 8001382:	2201      	movs	r2, #1
 8001384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001386:	f7ff fc6b 	bl	8000c60 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800138e:	f7ff fc67 	bl	8000c60 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e1a1      	b.n	80016e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a0:	4b2d      	ldr	r3, [pc, #180]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0f0      	beq.n	800138e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ac:	4b2a      	ldr	r3, [pc, #168]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	695b      	ldr	r3, [r3, #20]
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	4927      	ldr	r1, [pc, #156]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	4313      	orrs	r3, r2
 80013be:	600b      	str	r3, [r1, #0]
 80013c0:	e015      	b.n	80013ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c2:	4b26      	ldr	r3, [pc, #152]	; (800145c <HAL_RCC_OscConfig+0x270>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c8:	f7ff fc4a 	bl	8000c60 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013d0:	f7ff fc46 	bl	8000c60 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e180      	b.n	80016e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e2:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f0      	bne.n	80013d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0308 	and.w	r3, r3, #8
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d03a      	beq.n	8001470 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d019      	beq.n	8001436 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001402:	4b17      	ldr	r3, [pc, #92]	; (8001460 <HAL_RCC_OscConfig+0x274>)
 8001404:	2201      	movs	r2, #1
 8001406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001408:	f7ff fc2a 	bl	8000c60 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001410:	f7ff fc26 	bl	8000c60 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e160      	b.n	80016e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001422:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0f0      	beq.n	8001410 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800142e:	2001      	movs	r0, #1
 8001430:	f000 fad8 	bl	80019e4 <RCC_Delay>
 8001434:	e01c      	b.n	8001470 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <HAL_RCC_OscConfig+0x274>)
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143c:	f7ff fc10 	bl	8000c60 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001442:	e00f      	b.n	8001464 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001444:	f7ff fc0c 	bl	8000c60 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d908      	bls.n	8001464 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e146      	b.n	80016e4 <HAL_RCC_OscConfig+0x4f8>
 8001456:	bf00      	nop
 8001458:	40021000 	.word	0x40021000
 800145c:	42420000 	.word	0x42420000
 8001460:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001464:	4b92      	ldr	r3, [pc, #584]	; (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 8001466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1e9      	bne.n	8001444 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0304 	and.w	r3, r3, #4
 8001478:	2b00      	cmp	r3, #0
 800147a:	f000 80a6 	beq.w	80015ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800147e:	2300      	movs	r3, #0
 8001480:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001482:	4b8b      	ldr	r3, [pc, #556]	; (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10d      	bne.n	80014aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	4b88      	ldr	r3, [pc, #544]	; (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	4a87      	ldr	r2, [pc, #540]	; (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 8001494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001498:	61d3      	str	r3, [r2, #28]
 800149a:	4b85      	ldr	r3, [pc, #532]	; (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014a6:	2301      	movs	r3, #1
 80014a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014aa:	4b82      	ldr	r3, [pc, #520]	; (80016b4 <HAL_RCC_OscConfig+0x4c8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d118      	bne.n	80014e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014b6:	4b7f      	ldr	r3, [pc, #508]	; (80016b4 <HAL_RCC_OscConfig+0x4c8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a7e      	ldr	r2, [pc, #504]	; (80016b4 <HAL_RCC_OscConfig+0x4c8>)
 80014bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014c2:	f7ff fbcd 	bl	8000c60 <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ca:	f7ff fbc9 	bl	8000c60 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b64      	cmp	r3, #100	; 0x64
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e103      	b.n	80016e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014dc:	4b75      	ldr	r3, [pc, #468]	; (80016b4 <HAL_RCC_OscConfig+0x4c8>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0f0      	beq.n	80014ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d106      	bne.n	80014fe <HAL_RCC_OscConfig+0x312>
 80014f0:	4b6f      	ldr	r3, [pc, #444]	; (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	4a6e      	ldr	r2, [pc, #440]	; (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	6213      	str	r3, [r2, #32]
 80014fc:	e02d      	b.n	800155a <HAL_RCC_OscConfig+0x36e>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10c      	bne.n	8001520 <HAL_RCC_OscConfig+0x334>
 8001506:	4b6a      	ldr	r3, [pc, #424]	; (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	4a69      	ldr	r2, [pc, #420]	; (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 800150c:	f023 0301 	bic.w	r3, r3, #1
 8001510:	6213      	str	r3, [r2, #32]
 8001512:	4b67      	ldr	r3, [pc, #412]	; (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 8001514:	6a1b      	ldr	r3, [r3, #32]
 8001516:	4a66      	ldr	r2, [pc, #408]	; (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 8001518:	f023 0304 	bic.w	r3, r3, #4
 800151c:	6213      	str	r3, [r2, #32]
 800151e:	e01c      	b.n	800155a <HAL_RCC_OscConfig+0x36e>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	2b05      	cmp	r3, #5
 8001526:	d10c      	bne.n	8001542 <HAL_RCC_OscConfig+0x356>
 8001528:	4b61      	ldr	r3, [pc, #388]	; (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	4a60      	ldr	r2, [pc, #384]	; (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 800152e:	f043 0304 	orr.w	r3, r3, #4
 8001532:	6213      	str	r3, [r2, #32]
 8001534:	4b5e      	ldr	r3, [pc, #376]	; (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	4a5d      	ldr	r2, [pc, #372]	; (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6213      	str	r3, [r2, #32]
 8001540:	e00b      	b.n	800155a <HAL_RCC_OscConfig+0x36e>
 8001542:	4b5b      	ldr	r3, [pc, #364]	; (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	4a5a      	ldr	r2, [pc, #360]	; (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 8001548:	f023 0301 	bic.w	r3, r3, #1
 800154c:	6213      	str	r3, [r2, #32]
 800154e:	4b58      	ldr	r3, [pc, #352]	; (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	4a57      	ldr	r2, [pc, #348]	; (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 8001554:	f023 0304 	bic.w	r3, r3, #4
 8001558:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d015      	beq.n	800158e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001562:	f7ff fb7d 	bl	8000c60 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001568:	e00a      	b.n	8001580 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800156a:	f7ff fb79 	bl	8000c60 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	f241 3288 	movw	r2, #5000	; 0x1388
 8001578:	4293      	cmp	r3, r2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e0b1      	b.n	80016e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001580:	4b4b      	ldr	r3, [pc, #300]	; (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 8001582:	6a1b      	ldr	r3, [r3, #32]
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0ee      	beq.n	800156a <HAL_RCC_OscConfig+0x37e>
 800158c:	e014      	b.n	80015b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158e:	f7ff fb67 	bl	8000c60 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001594:	e00a      	b.n	80015ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001596:	f7ff fb63 	bl	8000c60 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e09b      	b.n	80016e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ac:	4b40      	ldr	r3, [pc, #256]	; (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1ee      	bne.n	8001596 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015b8:	7dfb      	ldrb	r3, [r7, #23]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d105      	bne.n	80015ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015be:	4b3c      	ldr	r3, [pc, #240]	; (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	4a3b      	ldr	r2, [pc, #236]	; (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 80015c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 8087 	beq.w	80016e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015d4:	4b36      	ldr	r3, [pc, #216]	; (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 030c 	and.w	r3, r3, #12
 80015dc:	2b08      	cmp	r3, #8
 80015de:	d061      	beq.n	80016a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d146      	bne.n	8001676 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e8:	4b33      	ldr	r3, [pc, #204]	; (80016b8 <HAL_RCC_OscConfig+0x4cc>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ee:	f7ff fb37 	bl	8000c60 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f6:	f7ff fb33 	bl	8000c60 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e06d      	b.n	80016e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001608:	4b29      	ldr	r3, [pc, #164]	; (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1f0      	bne.n	80015f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800161c:	d108      	bne.n	8001630 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800161e:	4b24      	ldr	r3, [pc, #144]	; (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	4921      	ldr	r1, [pc, #132]	; (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 800162c:	4313      	orrs	r3, r2
 800162e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001630:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a19      	ldr	r1, [r3, #32]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001640:	430b      	orrs	r3, r1
 8001642:	491b      	ldr	r1, [pc, #108]	; (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 8001644:	4313      	orrs	r3, r2
 8001646:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001648:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <HAL_RCC_OscConfig+0x4cc>)
 800164a:	2201      	movs	r2, #1
 800164c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164e:	f7ff fb07 	bl	8000c60 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001656:	f7ff fb03 	bl	8000c60 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e03d      	b.n	80016e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0f0      	beq.n	8001656 <HAL_RCC_OscConfig+0x46a>
 8001674:	e035      	b.n	80016e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <HAL_RCC_OscConfig+0x4cc>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167c:	f7ff faf0 	bl	8000c60 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001684:	f7ff faec 	bl	8000c60 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e026      	b.n	80016e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_RCC_OscConfig+0x4c4>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x498>
 80016a2:	e01e      	b.n	80016e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d107      	bne.n	80016bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e019      	b.n	80016e4 <HAL_RCC_OscConfig+0x4f8>
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40007000 	.word	0x40007000
 80016b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <HAL_RCC_OscConfig+0x500>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d106      	bne.n	80016de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016da:	429a      	cmp	r2, r3
 80016dc:	d001      	beq.n	80016e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40021000 	.word	0x40021000

080016f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e0d0      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001704:	4b6a      	ldr	r3, [pc, #424]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d910      	bls.n	8001734 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001712:	4b67      	ldr	r3, [pc, #412]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f023 0207 	bic.w	r2, r3, #7
 800171a:	4965      	ldr	r1, [pc, #404]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	4313      	orrs	r3, r2
 8001720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001722:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d001      	beq.n	8001734 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e0b8      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d020      	beq.n	8001782 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800174c:	4b59      	ldr	r3, [pc, #356]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	4a58      	ldr	r2, [pc, #352]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001752:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001756:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	2b00      	cmp	r3, #0
 8001762:	d005      	beq.n	8001770 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001764:	4b53      	ldr	r3, [pc, #332]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	4a52      	ldr	r2, [pc, #328]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800176a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800176e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001770:	4b50      	ldr	r3, [pc, #320]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	494d      	ldr	r1, [pc, #308]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800177e:	4313      	orrs	r3, r2
 8001780:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d040      	beq.n	8001810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d107      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001796:	4b47      	ldr	r3, [pc, #284]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d115      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e07f      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d107      	bne.n	80017be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ae:	4b41      	ldr	r3, [pc, #260]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d109      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e073      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017be:	4b3d      	ldr	r3, [pc, #244]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e06b      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ce:	4b39      	ldr	r3, [pc, #228]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f023 0203 	bic.w	r2, r3, #3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	4936      	ldr	r1, [pc, #216]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e0:	f7ff fa3e 	bl	8000c60 <HAL_GetTick>
 80017e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e6:	e00a      	b.n	80017fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e8:	f7ff fa3a 	bl	8000c60 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e053      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fe:	4b2d      	ldr	r3, [pc, #180]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 020c 	and.w	r2, r3, #12
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	429a      	cmp	r2, r3
 800180e:	d1eb      	bne.n	80017e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001810:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d210      	bcs.n	8001840 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181e:	4b24      	ldr	r3, [pc, #144]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f023 0207 	bic.w	r2, r3, #7
 8001826:	4922      	ldr	r1, [pc, #136]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	4313      	orrs	r3, r2
 800182c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800182e:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	d001      	beq.n	8001840 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e032      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	d008      	beq.n	800185e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800184c:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	4916      	ldr	r1, [pc, #88]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800185a:	4313      	orrs	r3, r2
 800185c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b00      	cmp	r3, #0
 8001868:	d009      	beq.n	800187e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800186a:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	490e      	ldr	r1, [pc, #56]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800187a:	4313      	orrs	r3, r2
 800187c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800187e:	f000 f821 	bl	80018c4 <HAL_RCC_GetSysClockFreq>
 8001882:	4602      	mov	r2, r0
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	091b      	lsrs	r3, r3, #4
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	490a      	ldr	r1, [pc, #40]	; (80018b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001890:	5ccb      	ldrb	r3, [r1, r3]
 8001892:	fa22 f303 	lsr.w	r3, r2, r3
 8001896:	4a09      	ldr	r2, [pc, #36]	; (80018bc <HAL_RCC_ClockConfig+0x1cc>)
 8001898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_RCC_ClockConfig+0x1d0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff f99c 	bl	8000bdc <HAL_InitTick>

  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40022000 	.word	0x40022000
 80018b4:	40021000 	.word	0x40021000
 80018b8:	08002ee0 	.word	0x08002ee0
 80018bc:	20000014 	.word	0x20000014
 80018c0:	20000018 	.word	0x20000018

080018c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c4:	b490      	push	{r4, r7}
 80018c6:	b08a      	sub	sp, #40	; 0x28
 80018c8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018ca:	4b29      	ldr	r3, [pc, #164]	; (8001970 <HAL_RCC_GetSysClockFreq+0xac>)
 80018cc:	1d3c      	adds	r4, r7, #4
 80018ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018d4:	f240 2301 	movw	r3, #513	; 0x201
 80018d8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
 80018de:	2300      	movs	r3, #0
 80018e0:	61bb      	str	r3, [r7, #24]
 80018e2:	2300      	movs	r3, #0
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018ee:	4b21      	ldr	r3, [pc, #132]	; (8001974 <HAL_RCC_GetSysClockFreq+0xb0>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f003 030c 	and.w	r3, r3, #12
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	d002      	beq.n	8001904 <HAL_RCC_GetSysClockFreq+0x40>
 80018fe:	2b08      	cmp	r3, #8
 8001900:	d003      	beq.n	800190a <HAL_RCC_GetSysClockFreq+0x46>
 8001902:	e02b      	b.n	800195c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001904:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001906:	623b      	str	r3, [r7, #32]
      break;
 8001908:	e02b      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	0c9b      	lsrs	r3, r3, #18
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	3328      	adds	r3, #40	; 0x28
 8001914:	443b      	add	r3, r7
 8001916:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800191a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d012      	beq.n	800194c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001926:	4b13      	ldr	r3, [pc, #76]	; (8001974 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	0c5b      	lsrs	r3, r3, #17
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	3328      	adds	r3, #40	; 0x28
 8001932:	443b      	add	r3, r7
 8001934:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001938:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	4a0e      	ldr	r2, [pc, #56]	; (8001978 <HAL_RCC_GetSysClockFreq+0xb4>)
 800193e:	fb03 f202 	mul.w	r2, r3, r2
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	fbb2 f3f3 	udiv	r3, r2, r3
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
 800194a:	e004      	b.n	8001956 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	4a0b      	ldr	r2, [pc, #44]	; (800197c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001950:	fb02 f303 	mul.w	r3, r2, r3
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	623b      	str	r3, [r7, #32]
      break;
 800195a:	e002      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <HAL_RCC_GetSysClockFreq+0xb4>)
 800195e:	623b      	str	r3, [r7, #32]
      break;
 8001960:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001962:	6a3b      	ldr	r3, [r7, #32]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3728      	adds	r7, #40	; 0x28
 8001968:	46bd      	mov	sp, r7
 800196a:	bc90      	pop	{r4, r7}
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	08002ed0 	.word	0x08002ed0
 8001974:	40021000 	.word	0x40021000
 8001978:	007a1200 	.word	0x007a1200
 800197c:	003d0900 	.word	0x003d0900

08001980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001984:	4b02      	ldr	r3, [pc, #8]	; (8001990 <HAL_RCC_GetHCLKFreq+0x10>)
 8001986:	681b      	ldr	r3, [r3, #0]
}
 8001988:	4618      	mov	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr
 8001990:	20000014 	.word	0x20000014

08001994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001998:	f7ff fff2 	bl	8001980 <HAL_RCC_GetHCLKFreq>
 800199c:	4602      	mov	r2, r0
 800199e:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	0a1b      	lsrs	r3, r3, #8
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	4903      	ldr	r1, [pc, #12]	; (80019b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019aa:	5ccb      	ldrb	r3, [r1, r3]
 80019ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40021000 	.word	0x40021000
 80019b8:	08002ef0 	.word	0x08002ef0

080019bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019c0:	f7ff ffde 	bl	8001980 <HAL_RCC_GetHCLKFreq>
 80019c4:	4602      	mov	r2, r0
 80019c6:	4b05      	ldr	r3, [pc, #20]	; (80019dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	0adb      	lsrs	r3, r3, #11
 80019cc:	f003 0307 	and.w	r3, r3, #7
 80019d0:	4903      	ldr	r1, [pc, #12]	; (80019e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019d2:	5ccb      	ldrb	r3, [r1, r3]
 80019d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019d8:	4618      	mov	r0, r3
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40021000 	.word	0x40021000
 80019e0:	08002ef0 	.word	0x08002ef0

080019e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019ec:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <RCC_Delay+0x34>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <RCC_Delay+0x38>)
 80019f2:	fba2 2303 	umull	r2, r3, r2, r3
 80019f6:	0a5b      	lsrs	r3, r3, #9
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	fb02 f303 	mul.w	r3, r2, r3
 80019fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a00:	bf00      	nop
  }
  while (Delay --);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	1e5a      	subs	r2, r3, #1
 8001a06:	60fa      	str	r2, [r7, #12]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1f9      	bne.n	8001a00 <RCC_Delay+0x1c>
}
 8001a0c:	bf00      	nop
 8001a0e:	bf00      	nop
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr
 8001a18:	20000014 	.word	0x20000014
 8001a1c:	10624dd3 	.word	0x10624dd3

08001a20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e041      	b.n	8001ab6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d106      	bne.n	8001a4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7fe ff00 	bl	800084c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2202      	movs	r2, #2
 8001a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3304      	adds	r3, #4
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4610      	mov	r0, r2
 8001a60:	f000 fa6a 	bl	8001f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d001      	beq.n	8001ad8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e035      	b.n	8001b44 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2202      	movs	r2, #2
 8001adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0201 	orr.w	r2, r2, #1
 8001aee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a16      	ldr	r2, [pc, #88]	; (8001b50 <HAL_TIM_Base_Start_IT+0x90>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d009      	beq.n	8001b0e <HAL_TIM_Base_Start_IT+0x4e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b02:	d004      	beq.n	8001b0e <HAL_TIM_Base_Start_IT+0x4e>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a12      	ldr	r2, [pc, #72]	; (8001b54 <HAL_TIM_Base_Start_IT+0x94>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d111      	bne.n	8001b32 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2b06      	cmp	r3, #6
 8001b1e:	d010      	beq.n	8001b42 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0201 	orr.w	r2, r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b30:	e007      	b.n	8001b42 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f042 0201 	orr.w	r2, r2, #1
 8001b40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40012c00 	.word	0x40012c00
 8001b54:	40000400 	.word	0x40000400

08001b58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d122      	bne.n	8001bb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d11b      	bne.n	8001bb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f06f 0202 	mvn.w	r2, #2
 8001b84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f9b1 	bl	8001f02 <HAL_TIM_IC_CaptureCallback>
 8001ba0:	e005      	b.n	8001bae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f9a4 	bl	8001ef0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f9b3 	bl	8001f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d122      	bne.n	8001c08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d11b      	bne.n	8001c08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f06f 0204 	mvn.w	r2, #4
 8001bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2202      	movs	r2, #2
 8001bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f987 	bl	8001f02 <HAL_TIM_IC_CaptureCallback>
 8001bf4:	e005      	b.n	8001c02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f97a 	bl	8001ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f989 	bl	8001f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d122      	bne.n	8001c5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f003 0308 	and.w	r3, r3, #8
 8001c20:	2b08      	cmp	r3, #8
 8001c22:	d11b      	bne.n	8001c5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f06f 0208 	mvn.w	r2, #8
 8001c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2204      	movs	r2, #4
 8001c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f95d 	bl	8001f02 <HAL_TIM_IC_CaptureCallback>
 8001c48:	e005      	b.n	8001c56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f950 	bl	8001ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f95f 	bl	8001f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	f003 0310 	and.w	r3, r3, #16
 8001c66:	2b10      	cmp	r3, #16
 8001c68:	d122      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	f003 0310 	and.w	r3, r3, #16
 8001c74:	2b10      	cmp	r3, #16
 8001c76:	d11b      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f06f 0210 	mvn.w	r2, #16
 8001c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2208      	movs	r2, #8
 8001c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f933 	bl	8001f02 <HAL_TIM_IC_CaptureCallback>
 8001c9c:	e005      	b.n	8001caa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f926 	bl	8001ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f935 	bl	8001f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d10e      	bne.n	8001cdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d107      	bne.n	8001cdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f06f 0201 	mvn.w	r2, #1
 8001cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7fe fbc2 	bl	8000460 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce6:	2b80      	cmp	r3, #128	; 0x80
 8001ce8:	d10e      	bne.n	8001d08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf4:	2b80      	cmp	r3, #128	; 0x80
 8001cf6:	d107      	bne.n	8001d08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 fa67 	bl	80021d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d12:	2b40      	cmp	r3, #64	; 0x40
 8001d14:	d10e      	bne.n	8001d34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d20:	2b40      	cmp	r3, #64	; 0x40
 8001d22:	d107      	bne.n	8001d34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f8f9 	bl	8001f26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	f003 0320 	and.w	r3, r3, #32
 8001d3e:	2b20      	cmp	r3, #32
 8001d40:	d10e      	bne.n	8001d60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	f003 0320 	and.w	r3, r3, #32
 8001d4c:	2b20      	cmp	r3, #32
 8001d4e:	d107      	bne.n	8001d60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f06f 0220 	mvn.w	r2, #32
 8001d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 fa32 	bl	80021c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d60:	bf00      	nop
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d101      	bne.n	8001d80 <HAL_TIM_ConfigClockSource+0x18>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	e0b3      	b.n	8001ee8 <HAL_TIM_ConfigClockSource+0x180>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001d9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001da6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001db8:	d03e      	beq.n	8001e38 <HAL_TIM_ConfigClockSource+0xd0>
 8001dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dbe:	f200 8087 	bhi.w	8001ed0 <HAL_TIM_ConfigClockSource+0x168>
 8001dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dc6:	f000 8085 	beq.w	8001ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8001dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dce:	d87f      	bhi.n	8001ed0 <HAL_TIM_ConfigClockSource+0x168>
 8001dd0:	2b70      	cmp	r3, #112	; 0x70
 8001dd2:	d01a      	beq.n	8001e0a <HAL_TIM_ConfigClockSource+0xa2>
 8001dd4:	2b70      	cmp	r3, #112	; 0x70
 8001dd6:	d87b      	bhi.n	8001ed0 <HAL_TIM_ConfigClockSource+0x168>
 8001dd8:	2b60      	cmp	r3, #96	; 0x60
 8001dda:	d050      	beq.n	8001e7e <HAL_TIM_ConfigClockSource+0x116>
 8001ddc:	2b60      	cmp	r3, #96	; 0x60
 8001dde:	d877      	bhi.n	8001ed0 <HAL_TIM_ConfigClockSource+0x168>
 8001de0:	2b50      	cmp	r3, #80	; 0x50
 8001de2:	d03c      	beq.n	8001e5e <HAL_TIM_ConfigClockSource+0xf6>
 8001de4:	2b50      	cmp	r3, #80	; 0x50
 8001de6:	d873      	bhi.n	8001ed0 <HAL_TIM_ConfigClockSource+0x168>
 8001de8:	2b40      	cmp	r3, #64	; 0x40
 8001dea:	d058      	beq.n	8001e9e <HAL_TIM_ConfigClockSource+0x136>
 8001dec:	2b40      	cmp	r3, #64	; 0x40
 8001dee:	d86f      	bhi.n	8001ed0 <HAL_TIM_ConfigClockSource+0x168>
 8001df0:	2b30      	cmp	r3, #48	; 0x30
 8001df2:	d064      	beq.n	8001ebe <HAL_TIM_ConfigClockSource+0x156>
 8001df4:	2b30      	cmp	r3, #48	; 0x30
 8001df6:	d86b      	bhi.n	8001ed0 <HAL_TIM_ConfigClockSource+0x168>
 8001df8:	2b20      	cmp	r3, #32
 8001dfa:	d060      	beq.n	8001ebe <HAL_TIM_ConfigClockSource+0x156>
 8001dfc:	2b20      	cmp	r3, #32
 8001dfe:	d867      	bhi.n	8001ed0 <HAL_TIM_ConfigClockSource+0x168>
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d05c      	beq.n	8001ebe <HAL_TIM_ConfigClockSource+0x156>
 8001e04:	2b10      	cmp	r3, #16
 8001e06:	d05a      	beq.n	8001ebe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001e08:	e062      	b.n	8001ed0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6818      	ldr	r0, [r3, #0]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	6899      	ldr	r1, [r3, #8]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	f000 f95c 	bl	80020d6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e2c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	609a      	str	r2, [r3, #8]
      break;
 8001e36:	e04e      	b.n	8001ed6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	6899      	ldr	r1, [r3, #8]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	f000 f945 	bl	80020d6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689a      	ldr	r2, [r3, #8]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e5a:	609a      	str	r2, [r3, #8]
      break;
 8001e5c:	e03b      	b.n	8001ed6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	6859      	ldr	r1, [r3, #4]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	f000 f8bc 	bl	8001fe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2150      	movs	r1, #80	; 0x50
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 f913 	bl	80020a2 <TIM_ITRx_SetConfig>
      break;
 8001e7c:	e02b      	b.n	8001ed6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	6859      	ldr	r1, [r3, #4]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f000 f8da 	bl	8002044 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2160      	movs	r1, #96	; 0x60
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 f903 	bl	80020a2 <TIM_ITRx_SetConfig>
      break;
 8001e9c:	e01b      	b.n	8001ed6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6818      	ldr	r0, [r3, #0]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	6859      	ldr	r1, [r3, #4]
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	f000 f89c 	bl	8001fe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2140      	movs	r1, #64	; 0x40
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f000 f8f3 	bl	80020a2 <TIM_ITRx_SetConfig>
      break;
 8001ebc:	e00b      	b.n	8001ed6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4610      	mov	r0, r2
 8001eca:	f000 f8ea 	bl	80020a2 <TIM_ITRx_SetConfig>
        break;
 8001ece:	e002      	b.n	8001ed6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001ed0:	bf00      	nop
 8001ed2:	e000      	b.n	8001ed6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001ed4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr

08001f02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr

08001f14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr

08001f26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr

08001f38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a25      	ldr	r2, [pc, #148]	; (8001fe0 <TIM_Base_SetConfig+0xa8>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d007      	beq.n	8001f60 <TIM_Base_SetConfig+0x28>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f56:	d003      	beq.n	8001f60 <TIM_Base_SetConfig+0x28>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a22      	ldr	r2, [pc, #136]	; (8001fe4 <TIM_Base_SetConfig+0xac>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d108      	bne.n	8001f72 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a1a      	ldr	r2, [pc, #104]	; (8001fe0 <TIM_Base_SetConfig+0xa8>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d007      	beq.n	8001f8a <TIM_Base_SetConfig+0x52>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f80:	d003      	beq.n	8001f8a <TIM_Base_SetConfig+0x52>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a17      	ldr	r2, [pc, #92]	; (8001fe4 <TIM_Base_SetConfig+0xac>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d108      	bne.n	8001f9c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a07      	ldr	r2, [pc, #28]	; (8001fe0 <TIM_Base_SetConfig+0xa8>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d103      	bne.n	8001fd0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	615a      	str	r2, [r3, #20]
}
 8001fd6:	bf00      	nop
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr
 8001fe0:	40012c00 	.word	0x40012c00
 8001fe4:	40000400 	.word	0x40000400

08001fe8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b087      	sub	sp, #28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	f023 0201 	bic.w	r2, r3, #1
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4313      	orrs	r3, r2
 800201c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f023 030a 	bic.w	r3, r3, #10
 8002024:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	4313      	orrs	r3, r2
 800202c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	621a      	str	r2, [r3, #32]
}
 800203a:	bf00      	nop
 800203c:	371c      	adds	r7, #28
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr

08002044 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002044:	b480      	push	{r7}
 8002046:	b087      	sub	sp, #28
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	f023 0210 	bic.w	r2, r3, #16
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800206e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	031b      	lsls	r3, r3, #12
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	4313      	orrs	r3, r2
 8002078:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002080:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	011b      	lsls	r3, r3, #4
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	4313      	orrs	r3, r2
 800208a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	621a      	str	r2, [r3, #32]
}
 8002098:	bf00      	nop
 800209a:	371c      	adds	r7, #28
 800209c:	46bd      	mov	sp, r7
 800209e:	bc80      	pop	{r7}
 80020a0:	4770      	bx	lr

080020a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b085      	sub	sp, #20
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4313      	orrs	r3, r2
 80020c0:	f043 0307 	orr.w	r3, r3, #7
 80020c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	609a      	str	r2, [r3, #8]
}
 80020cc:	bf00      	nop
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr

080020d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b087      	sub	sp, #28
 80020da:	af00      	add	r7, sp, #0
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
 80020e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	021a      	lsls	r2, r3, #8
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	431a      	orrs	r2, r3
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	4313      	orrs	r3, r2
 8002102:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	609a      	str	r2, [r3, #8]
}
 800210a:	bf00      	nop
 800210c:	371c      	adds	r7, #28
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr

08002114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002128:	2302      	movs	r3, #2
 800212a:	e041      	b.n	80021b0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2202      	movs	r2, #2
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002152:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	4313      	orrs	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a14      	ldr	r2, [pc, #80]	; (80021bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d009      	beq.n	8002184 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002178:	d004      	beq.n	8002184 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a10      	ldr	r2, [pc, #64]	; (80021c0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d10c      	bne.n	800219e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800218a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	68ba      	ldr	r2, [r7, #8]
 8002192:	4313      	orrs	r3, r2
 8002194:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40012c00 	.word	0x40012c00
 80021c0:	40000400 	.word	0x40000400

080021c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr

080021d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr

080021e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e03f      	b.n	800227a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d106      	bne.n	8002214 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7fe fb40 	bl	8000894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2224      	movs	r2, #36	; 0x24
 8002218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800222a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 f905 	bl	800243c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	691a      	ldr	r2, [r3, #16]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002240:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	695a      	ldr	r2, [r3, #20]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002250:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002260:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2220      	movs	r2, #32
 800226c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2220      	movs	r2, #32
 8002274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b08a      	sub	sp, #40	; 0x28
 8002286:	af02      	add	r7, sp, #8
 8002288:	60f8      	str	r0, [r7, #12]
 800228a:	60b9      	str	r1, [r7, #8]
 800228c:	603b      	str	r3, [r7, #0]
 800228e:	4613      	mov	r3, r2
 8002290:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b20      	cmp	r3, #32
 80022a0:	d17c      	bne.n	800239c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d002      	beq.n	80022ae <HAL_UART_Transmit+0x2c>
 80022a8:	88fb      	ldrh	r3, [r7, #6]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e075      	b.n	800239e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d101      	bne.n	80022c0 <HAL_UART_Transmit+0x3e>
 80022bc:	2302      	movs	r3, #2
 80022be:	e06e      	b.n	800239e <HAL_UART_Transmit+0x11c>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2221      	movs	r2, #33	; 0x21
 80022d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022d6:	f7fe fcc3 	bl	8000c60 <HAL_GetTick>
 80022da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	88fa      	ldrh	r2, [r7, #6]
 80022e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	88fa      	ldrh	r2, [r7, #6]
 80022e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022f0:	d108      	bne.n	8002304 <HAL_UART_Transmit+0x82>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d104      	bne.n	8002304 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	61bb      	str	r3, [r7, #24]
 8002302:	e003      	b.n	800230c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002308:	2300      	movs	r3, #0
 800230a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002314:	e02a      	b.n	800236c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	2200      	movs	r2, #0
 800231e:	2180      	movs	r1, #128	; 0x80
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f000 f840 	bl	80023a6 <UART_WaitOnFlagUntilTimeout>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e036      	b.n	800239e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10b      	bne.n	800234e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002344:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	3302      	adds	r3, #2
 800234a:	61bb      	str	r3, [r7, #24]
 800234c:	e007      	b.n	800235e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	781a      	ldrb	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	3301      	adds	r3, #1
 800235c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002362:	b29b      	uxth	r3, r3
 8002364:	3b01      	subs	r3, #1
 8002366:	b29a      	uxth	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002370:	b29b      	uxth	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1cf      	bne.n	8002316 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	2200      	movs	r2, #0
 800237e:	2140      	movs	r1, #64	; 0x40
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f000 f810 	bl	80023a6 <UART_WaitOnFlagUntilTimeout>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e006      	b.n	800239e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2220      	movs	r2, #32
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	e000      	b.n	800239e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800239c:	2302      	movs	r3, #2
  }
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3720      	adds	r7, #32
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b084      	sub	sp, #16
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	60f8      	str	r0, [r7, #12]
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	603b      	str	r3, [r7, #0]
 80023b2:	4613      	mov	r3, r2
 80023b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023b6:	e02c      	b.n	8002412 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023be:	d028      	beq.n	8002412 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d007      	beq.n	80023d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80023c6:	f7fe fc4b 	bl	8000c60 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d21d      	bcs.n	8002412 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80023e4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695a      	ldr	r2, [r3, #20]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0201 	bic.w	r2, r2, #1
 80023f4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2220      	movs	r2, #32
 80023fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2220      	movs	r2, #32
 8002402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e00f      	b.n	8002432 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	4013      	ands	r3, r2
 800241c:	68ba      	ldr	r2, [r7, #8]
 800241e:	429a      	cmp	r2, r3
 8002420:	bf0c      	ite	eq
 8002422:	2301      	moveq	r3, #1
 8002424:	2300      	movne	r3, #0
 8002426:	b2db      	uxtb	r3, r3
 8002428:	461a      	mov	r2, r3
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	429a      	cmp	r2, r3
 800242e:	d0c3      	beq.n	80023b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	4313      	orrs	r3, r2
 800246a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002476:	f023 030c 	bic.w	r3, r3, #12
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6812      	ldr	r2, [r2, #0]
 800247e:	68b9      	ldr	r1, [r7, #8]
 8002480:	430b      	orrs	r3, r1
 8002482:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699a      	ldr	r2, [r3, #24]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a2c      	ldr	r2, [pc, #176]	; (8002550 <UART_SetConfig+0x114>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d103      	bne.n	80024ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80024a4:	f7ff fa8a 	bl	80019bc <HAL_RCC_GetPCLK2Freq>
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	e002      	b.n	80024b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80024ac:	f7ff fa72 	bl	8001994 <HAL_RCC_GetPCLK1Freq>
 80024b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	009a      	lsls	r2, r3, #2
 80024bc:	441a      	add	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c8:	4a22      	ldr	r2, [pc, #136]	; (8002554 <UART_SetConfig+0x118>)
 80024ca:	fba2 2303 	umull	r2, r3, r2, r3
 80024ce:	095b      	lsrs	r3, r3, #5
 80024d0:	0119      	lsls	r1, r3, #4
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	009a      	lsls	r2, r3, #2
 80024dc:	441a      	add	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80024e8:	4b1a      	ldr	r3, [pc, #104]	; (8002554 <UART_SetConfig+0x118>)
 80024ea:	fba3 0302 	umull	r0, r3, r3, r2
 80024ee:	095b      	lsrs	r3, r3, #5
 80024f0:	2064      	movs	r0, #100	; 0x64
 80024f2:	fb00 f303 	mul.w	r3, r0, r3
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	3332      	adds	r3, #50	; 0x32
 80024fc:	4a15      	ldr	r2, [pc, #84]	; (8002554 <UART_SetConfig+0x118>)
 80024fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002502:	095b      	lsrs	r3, r3, #5
 8002504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002508:	4419      	add	r1, r3
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4613      	mov	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	009a      	lsls	r2, r3, #2
 8002514:	441a      	add	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <UART_SetConfig+0x118>)
 8002522:	fba3 0302 	umull	r0, r3, r3, r2
 8002526:	095b      	lsrs	r3, r3, #5
 8002528:	2064      	movs	r0, #100	; 0x64
 800252a:	fb00 f303 	mul.w	r3, r0, r3
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	011b      	lsls	r3, r3, #4
 8002532:	3332      	adds	r3, #50	; 0x32
 8002534:	4a07      	ldr	r2, [pc, #28]	; (8002554 <UART_SetConfig+0x118>)
 8002536:	fba2 2303 	umull	r2, r3, r2, r3
 800253a:	095b      	lsrs	r3, r3, #5
 800253c:	f003 020f 	and.w	r2, r3, #15
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	440a      	add	r2, r1
 8002546:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002548:	bf00      	nop
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40013800 	.word	0x40013800
 8002554:	51eb851f 	.word	0x51eb851f

08002558 <__errno>:
 8002558:	4b01      	ldr	r3, [pc, #4]	; (8002560 <__errno+0x8>)
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	20000020 	.word	0x20000020

08002564 <__libc_init_array>:
 8002564:	b570      	push	{r4, r5, r6, lr}
 8002566:	2600      	movs	r6, #0
 8002568:	4d0c      	ldr	r5, [pc, #48]	; (800259c <__libc_init_array+0x38>)
 800256a:	4c0d      	ldr	r4, [pc, #52]	; (80025a0 <__libc_init_array+0x3c>)
 800256c:	1b64      	subs	r4, r4, r5
 800256e:	10a4      	asrs	r4, r4, #2
 8002570:	42a6      	cmp	r6, r4
 8002572:	d109      	bne.n	8002588 <__libc_init_array+0x24>
 8002574:	f000 fc9c 	bl	8002eb0 <_init>
 8002578:	2600      	movs	r6, #0
 800257a:	4d0a      	ldr	r5, [pc, #40]	; (80025a4 <__libc_init_array+0x40>)
 800257c:	4c0a      	ldr	r4, [pc, #40]	; (80025a8 <__libc_init_array+0x44>)
 800257e:	1b64      	subs	r4, r4, r5
 8002580:	10a4      	asrs	r4, r4, #2
 8002582:	42a6      	cmp	r6, r4
 8002584:	d105      	bne.n	8002592 <__libc_init_array+0x2e>
 8002586:	bd70      	pop	{r4, r5, r6, pc}
 8002588:	f855 3b04 	ldr.w	r3, [r5], #4
 800258c:	4798      	blx	r3
 800258e:	3601      	adds	r6, #1
 8002590:	e7ee      	b.n	8002570 <__libc_init_array+0xc>
 8002592:	f855 3b04 	ldr.w	r3, [r5], #4
 8002596:	4798      	blx	r3
 8002598:	3601      	adds	r6, #1
 800259a:	e7f2      	b.n	8002582 <__libc_init_array+0x1e>
 800259c:	08002f2c 	.word	0x08002f2c
 80025a0:	08002f2c 	.word	0x08002f2c
 80025a4:	08002f2c 	.word	0x08002f2c
 80025a8:	08002f30 	.word	0x08002f30

080025ac <memset>:
 80025ac:	4603      	mov	r3, r0
 80025ae:	4402      	add	r2, r0
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d100      	bne.n	80025b6 <memset+0xa>
 80025b4:	4770      	bx	lr
 80025b6:	f803 1b01 	strb.w	r1, [r3], #1
 80025ba:	e7f9      	b.n	80025b0 <memset+0x4>

080025bc <siprintf>:
 80025bc:	b40e      	push	{r1, r2, r3}
 80025be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80025c2:	b500      	push	{lr}
 80025c4:	b09c      	sub	sp, #112	; 0x70
 80025c6:	ab1d      	add	r3, sp, #116	; 0x74
 80025c8:	9002      	str	r0, [sp, #8]
 80025ca:	9006      	str	r0, [sp, #24]
 80025cc:	9107      	str	r1, [sp, #28]
 80025ce:	9104      	str	r1, [sp, #16]
 80025d0:	4808      	ldr	r0, [pc, #32]	; (80025f4 <siprintf+0x38>)
 80025d2:	4909      	ldr	r1, [pc, #36]	; (80025f8 <siprintf+0x3c>)
 80025d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80025d8:	9105      	str	r1, [sp, #20]
 80025da:	6800      	ldr	r0, [r0, #0]
 80025dc:	a902      	add	r1, sp, #8
 80025de:	9301      	str	r3, [sp, #4]
 80025e0:	f000 f868 	bl	80026b4 <_svfiprintf_r>
 80025e4:	2200      	movs	r2, #0
 80025e6:	9b02      	ldr	r3, [sp, #8]
 80025e8:	701a      	strb	r2, [r3, #0]
 80025ea:	b01c      	add	sp, #112	; 0x70
 80025ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80025f0:	b003      	add	sp, #12
 80025f2:	4770      	bx	lr
 80025f4:	20000020 	.word	0x20000020
 80025f8:	ffff0208 	.word	0xffff0208

080025fc <__ssputs_r>:
 80025fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002600:	688e      	ldr	r6, [r1, #8]
 8002602:	4682      	mov	sl, r0
 8002604:	429e      	cmp	r6, r3
 8002606:	460c      	mov	r4, r1
 8002608:	4690      	mov	r8, r2
 800260a:	461f      	mov	r7, r3
 800260c:	d838      	bhi.n	8002680 <__ssputs_r+0x84>
 800260e:	898a      	ldrh	r2, [r1, #12]
 8002610:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002614:	d032      	beq.n	800267c <__ssputs_r+0x80>
 8002616:	6825      	ldr	r5, [r4, #0]
 8002618:	6909      	ldr	r1, [r1, #16]
 800261a:	3301      	adds	r3, #1
 800261c:	eba5 0901 	sub.w	r9, r5, r1
 8002620:	6965      	ldr	r5, [r4, #20]
 8002622:	444b      	add	r3, r9
 8002624:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002628:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800262c:	106d      	asrs	r5, r5, #1
 800262e:	429d      	cmp	r5, r3
 8002630:	bf38      	it	cc
 8002632:	461d      	movcc	r5, r3
 8002634:	0553      	lsls	r3, r2, #21
 8002636:	d531      	bpl.n	800269c <__ssputs_r+0xa0>
 8002638:	4629      	mov	r1, r5
 800263a:	f000 fb6f 	bl	8002d1c <_malloc_r>
 800263e:	4606      	mov	r6, r0
 8002640:	b950      	cbnz	r0, 8002658 <__ssputs_r+0x5c>
 8002642:	230c      	movs	r3, #12
 8002644:	f04f 30ff 	mov.w	r0, #4294967295
 8002648:	f8ca 3000 	str.w	r3, [sl]
 800264c:	89a3      	ldrh	r3, [r4, #12]
 800264e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002652:	81a3      	strh	r3, [r4, #12]
 8002654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002658:	464a      	mov	r2, r9
 800265a:	6921      	ldr	r1, [r4, #16]
 800265c:	f000 face 	bl	8002bfc <memcpy>
 8002660:	89a3      	ldrh	r3, [r4, #12]
 8002662:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800266a:	81a3      	strh	r3, [r4, #12]
 800266c:	6126      	str	r6, [r4, #16]
 800266e:	444e      	add	r6, r9
 8002670:	6026      	str	r6, [r4, #0]
 8002672:	463e      	mov	r6, r7
 8002674:	6165      	str	r5, [r4, #20]
 8002676:	eba5 0509 	sub.w	r5, r5, r9
 800267a:	60a5      	str	r5, [r4, #8]
 800267c:	42be      	cmp	r6, r7
 800267e:	d900      	bls.n	8002682 <__ssputs_r+0x86>
 8002680:	463e      	mov	r6, r7
 8002682:	4632      	mov	r2, r6
 8002684:	4641      	mov	r1, r8
 8002686:	6820      	ldr	r0, [r4, #0]
 8002688:	f000 fac6 	bl	8002c18 <memmove>
 800268c:	68a3      	ldr	r3, [r4, #8]
 800268e:	2000      	movs	r0, #0
 8002690:	1b9b      	subs	r3, r3, r6
 8002692:	60a3      	str	r3, [r4, #8]
 8002694:	6823      	ldr	r3, [r4, #0]
 8002696:	4433      	add	r3, r6
 8002698:	6023      	str	r3, [r4, #0]
 800269a:	e7db      	b.n	8002654 <__ssputs_r+0x58>
 800269c:	462a      	mov	r2, r5
 800269e:	f000 fbb1 	bl	8002e04 <_realloc_r>
 80026a2:	4606      	mov	r6, r0
 80026a4:	2800      	cmp	r0, #0
 80026a6:	d1e1      	bne.n	800266c <__ssputs_r+0x70>
 80026a8:	4650      	mov	r0, sl
 80026aa:	6921      	ldr	r1, [r4, #16]
 80026ac:	f000 face 	bl	8002c4c <_free_r>
 80026b0:	e7c7      	b.n	8002642 <__ssputs_r+0x46>
	...

080026b4 <_svfiprintf_r>:
 80026b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026b8:	4698      	mov	r8, r3
 80026ba:	898b      	ldrh	r3, [r1, #12]
 80026bc:	4607      	mov	r7, r0
 80026be:	061b      	lsls	r3, r3, #24
 80026c0:	460d      	mov	r5, r1
 80026c2:	4614      	mov	r4, r2
 80026c4:	b09d      	sub	sp, #116	; 0x74
 80026c6:	d50e      	bpl.n	80026e6 <_svfiprintf_r+0x32>
 80026c8:	690b      	ldr	r3, [r1, #16]
 80026ca:	b963      	cbnz	r3, 80026e6 <_svfiprintf_r+0x32>
 80026cc:	2140      	movs	r1, #64	; 0x40
 80026ce:	f000 fb25 	bl	8002d1c <_malloc_r>
 80026d2:	6028      	str	r0, [r5, #0]
 80026d4:	6128      	str	r0, [r5, #16]
 80026d6:	b920      	cbnz	r0, 80026e2 <_svfiprintf_r+0x2e>
 80026d8:	230c      	movs	r3, #12
 80026da:	603b      	str	r3, [r7, #0]
 80026dc:	f04f 30ff 	mov.w	r0, #4294967295
 80026e0:	e0d1      	b.n	8002886 <_svfiprintf_r+0x1d2>
 80026e2:	2340      	movs	r3, #64	; 0x40
 80026e4:	616b      	str	r3, [r5, #20]
 80026e6:	2300      	movs	r3, #0
 80026e8:	9309      	str	r3, [sp, #36]	; 0x24
 80026ea:	2320      	movs	r3, #32
 80026ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80026f0:	2330      	movs	r3, #48	; 0x30
 80026f2:	f04f 0901 	mov.w	r9, #1
 80026f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80026fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80028a0 <_svfiprintf_r+0x1ec>
 80026fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002702:	4623      	mov	r3, r4
 8002704:	469a      	mov	sl, r3
 8002706:	f813 2b01 	ldrb.w	r2, [r3], #1
 800270a:	b10a      	cbz	r2, 8002710 <_svfiprintf_r+0x5c>
 800270c:	2a25      	cmp	r2, #37	; 0x25
 800270e:	d1f9      	bne.n	8002704 <_svfiprintf_r+0x50>
 8002710:	ebba 0b04 	subs.w	fp, sl, r4
 8002714:	d00b      	beq.n	800272e <_svfiprintf_r+0x7a>
 8002716:	465b      	mov	r3, fp
 8002718:	4622      	mov	r2, r4
 800271a:	4629      	mov	r1, r5
 800271c:	4638      	mov	r0, r7
 800271e:	f7ff ff6d 	bl	80025fc <__ssputs_r>
 8002722:	3001      	adds	r0, #1
 8002724:	f000 80aa 	beq.w	800287c <_svfiprintf_r+0x1c8>
 8002728:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800272a:	445a      	add	r2, fp
 800272c:	9209      	str	r2, [sp, #36]	; 0x24
 800272e:	f89a 3000 	ldrb.w	r3, [sl]
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 80a2 	beq.w	800287c <_svfiprintf_r+0x1c8>
 8002738:	2300      	movs	r3, #0
 800273a:	f04f 32ff 	mov.w	r2, #4294967295
 800273e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002742:	f10a 0a01 	add.w	sl, sl, #1
 8002746:	9304      	str	r3, [sp, #16]
 8002748:	9307      	str	r3, [sp, #28]
 800274a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800274e:	931a      	str	r3, [sp, #104]	; 0x68
 8002750:	4654      	mov	r4, sl
 8002752:	2205      	movs	r2, #5
 8002754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002758:	4851      	ldr	r0, [pc, #324]	; (80028a0 <_svfiprintf_r+0x1ec>)
 800275a:	f000 fa41 	bl	8002be0 <memchr>
 800275e:	9a04      	ldr	r2, [sp, #16]
 8002760:	b9d8      	cbnz	r0, 800279a <_svfiprintf_r+0xe6>
 8002762:	06d0      	lsls	r0, r2, #27
 8002764:	bf44      	itt	mi
 8002766:	2320      	movmi	r3, #32
 8002768:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800276c:	0711      	lsls	r1, r2, #28
 800276e:	bf44      	itt	mi
 8002770:	232b      	movmi	r3, #43	; 0x2b
 8002772:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002776:	f89a 3000 	ldrb.w	r3, [sl]
 800277a:	2b2a      	cmp	r3, #42	; 0x2a
 800277c:	d015      	beq.n	80027aa <_svfiprintf_r+0xf6>
 800277e:	4654      	mov	r4, sl
 8002780:	2000      	movs	r0, #0
 8002782:	f04f 0c0a 	mov.w	ip, #10
 8002786:	9a07      	ldr	r2, [sp, #28]
 8002788:	4621      	mov	r1, r4
 800278a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800278e:	3b30      	subs	r3, #48	; 0x30
 8002790:	2b09      	cmp	r3, #9
 8002792:	d94e      	bls.n	8002832 <_svfiprintf_r+0x17e>
 8002794:	b1b0      	cbz	r0, 80027c4 <_svfiprintf_r+0x110>
 8002796:	9207      	str	r2, [sp, #28]
 8002798:	e014      	b.n	80027c4 <_svfiprintf_r+0x110>
 800279a:	eba0 0308 	sub.w	r3, r0, r8
 800279e:	fa09 f303 	lsl.w	r3, r9, r3
 80027a2:	4313      	orrs	r3, r2
 80027a4:	46a2      	mov	sl, r4
 80027a6:	9304      	str	r3, [sp, #16]
 80027a8:	e7d2      	b.n	8002750 <_svfiprintf_r+0x9c>
 80027aa:	9b03      	ldr	r3, [sp, #12]
 80027ac:	1d19      	adds	r1, r3, #4
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	9103      	str	r1, [sp, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	bfbb      	ittet	lt
 80027b6:	425b      	neglt	r3, r3
 80027b8:	f042 0202 	orrlt.w	r2, r2, #2
 80027bc:	9307      	strge	r3, [sp, #28]
 80027be:	9307      	strlt	r3, [sp, #28]
 80027c0:	bfb8      	it	lt
 80027c2:	9204      	strlt	r2, [sp, #16]
 80027c4:	7823      	ldrb	r3, [r4, #0]
 80027c6:	2b2e      	cmp	r3, #46	; 0x2e
 80027c8:	d10c      	bne.n	80027e4 <_svfiprintf_r+0x130>
 80027ca:	7863      	ldrb	r3, [r4, #1]
 80027cc:	2b2a      	cmp	r3, #42	; 0x2a
 80027ce:	d135      	bne.n	800283c <_svfiprintf_r+0x188>
 80027d0:	9b03      	ldr	r3, [sp, #12]
 80027d2:	3402      	adds	r4, #2
 80027d4:	1d1a      	adds	r2, r3, #4
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	9203      	str	r2, [sp, #12]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	bfb8      	it	lt
 80027de:	f04f 33ff 	movlt.w	r3, #4294967295
 80027e2:	9305      	str	r3, [sp, #20]
 80027e4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80028a4 <_svfiprintf_r+0x1f0>
 80027e8:	2203      	movs	r2, #3
 80027ea:	4650      	mov	r0, sl
 80027ec:	7821      	ldrb	r1, [r4, #0]
 80027ee:	f000 f9f7 	bl	8002be0 <memchr>
 80027f2:	b140      	cbz	r0, 8002806 <_svfiprintf_r+0x152>
 80027f4:	2340      	movs	r3, #64	; 0x40
 80027f6:	eba0 000a 	sub.w	r0, r0, sl
 80027fa:	fa03 f000 	lsl.w	r0, r3, r0
 80027fe:	9b04      	ldr	r3, [sp, #16]
 8002800:	3401      	adds	r4, #1
 8002802:	4303      	orrs	r3, r0
 8002804:	9304      	str	r3, [sp, #16]
 8002806:	f814 1b01 	ldrb.w	r1, [r4], #1
 800280a:	2206      	movs	r2, #6
 800280c:	4826      	ldr	r0, [pc, #152]	; (80028a8 <_svfiprintf_r+0x1f4>)
 800280e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002812:	f000 f9e5 	bl	8002be0 <memchr>
 8002816:	2800      	cmp	r0, #0
 8002818:	d038      	beq.n	800288c <_svfiprintf_r+0x1d8>
 800281a:	4b24      	ldr	r3, [pc, #144]	; (80028ac <_svfiprintf_r+0x1f8>)
 800281c:	bb1b      	cbnz	r3, 8002866 <_svfiprintf_r+0x1b2>
 800281e:	9b03      	ldr	r3, [sp, #12]
 8002820:	3307      	adds	r3, #7
 8002822:	f023 0307 	bic.w	r3, r3, #7
 8002826:	3308      	adds	r3, #8
 8002828:	9303      	str	r3, [sp, #12]
 800282a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800282c:	4433      	add	r3, r6
 800282e:	9309      	str	r3, [sp, #36]	; 0x24
 8002830:	e767      	b.n	8002702 <_svfiprintf_r+0x4e>
 8002832:	460c      	mov	r4, r1
 8002834:	2001      	movs	r0, #1
 8002836:	fb0c 3202 	mla	r2, ip, r2, r3
 800283a:	e7a5      	b.n	8002788 <_svfiprintf_r+0xd4>
 800283c:	2300      	movs	r3, #0
 800283e:	f04f 0c0a 	mov.w	ip, #10
 8002842:	4619      	mov	r1, r3
 8002844:	3401      	adds	r4, #1
 8002846:	9305      	str	r3, [sp, #20]
 8002848:	4620      	mov	r0, r4
 800284a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800284e:	3a30      	subs	r2, #48	; 0x30
 8002850:	2a09      	cmp	r2, #9
 8002852:	d903      	bls.n	800285c <_svfiprintf_r+0x1a8>
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0c5      	beq.n	80027e4 <_svfiprintf_r+0x130>
 8002858:	9105      	str	r1, [sp, #20]
 800285a:	e7c3      	b.n	80027e4 <_svfiprintf_r+0x130>
 800285c:	4604      	mov	r4, r0
 800285e:	2301      	movs	r3, #1
 8002860:	fb0c 2101 	mla	r1, ip, r1, r2
 8002864:	e7f0      	b.n	8002848 <_svfiprintf_r+0x194>
 8002866:	ab03      	add	r3, sp, #12
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	462a      	mov	r2, r5
 800286c:	4638      	mov	r0, r7
 800286e:	4b10      	ldr	r3, [pc, #64]	; (80028b0 <_svfiprintf_r+0x1fc>)
 8002870:	a904      	add	r1, sp, #16
 8002872:	f3af 8000 	nop.w
 8002876:	1c42      	adds	r2, r0, #1
 8002878:	4606      	mov	r6, r0
 800287a:	d1d6      	bne.n	800282a <_svfiprintf_r+0x176>
 800287c:	89ab      	ldrh	r3, [r5, #12]
 800287e:	065b      	lsls	r3, r3, #25
 8002880:	f53f af2c 	bmi.w	80026dc <_svfiprintf_r+0x28>
 8002884:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002886:	b01d      	add	sp, #116	; 0x74
 8002888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800288c:	ab03      	add	r3, sp, #12
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	462a      	mov	r2, r5
 8002892:	4638      	mov	r0, r7
 8002894:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <_svfiprintf_r+0x1fc>)
 8002896:	a904      	add	r1, sp, #16
 8002898:	f000 f87c 	bl	8002994 <_printf_i>
 800289c:	e7eb      	b.n	8002876 <_svfiprintf_r+0x1c2>
 800289e:	bf00      	nop
 80028a0:	08002ef8 	.word	0x08002ef8
 80028a4:	08002efe 	.word	0x08002efe
 80028a8:	08002f02 	.word	0x08002f02
 80028ac:	00000000 	.word	0x00000000
 80028b0:	080025fd 	.word	0x080025fd

080028b4 <_printf_common>:
 80028b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028b8:	4616      	mov	r6, r2
 80028ba:	4699      	mov	r9, r3
 80028bc:	688a      	ldr	r2, [r1, #8]
 80028be:	690b      	ldr	r3, [r1, #16]
 80028c0:	4607      	mov	r7, r0
 80028c2:	4293      	cmp	r3, r2
 80028c4:	bfb8      	it	lt
 80028c6:	4613      	movlt	r3, r2
 80028c8:	6033      	str	r3, [r6, #0]
 80028ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80028ce:	460c      	mov	r4, r1
 80028d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80028d4:	b10a      	cbz	r2, 80028da <_printf_common+0x26>
 80028d6:	3301      	adds	r3, #1
 80028d8:	6033      	str	r3, [r6, #0]
 80028da:	6823      	ldr	r3, [r4, #0]
 80028dc:	0699      	lsls	r1, r3, #26
 80028de:	bf42      	ittt	mi
 80028e0:	6833      	ldrmi	r3, [r6, #0]
 80028e2:	3302      	addmi	r3, #2
 80028e4:	6033      	strmi	r3, [r6, #0]
 80028e6:	6825      	ldr	r5, [r4, #0]
 80028e8:	f015 0506 	ands.w	r5, r5, #6
 80028ec:	d106      	bne.n	80028fc <_printf_common+0x48>
 80028ee:	f104 0a19 	add.w	sl, r4, #25
 80028f2:	68e3      	ldr	r3, [r4, #12]
 80028f4:	6832      	ldr	r2, [r6, #0]
 80028f6:	1a9b      	subs	r3, r3, r2
 80028f8:	42ab      	cmp	r3, r5
 80028fa:	dc28      	bgt.n	800294e <_printf_common+0x9a>
 80028fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002900:	1e13      	subs	r3, r2, #0
 8002902:	6822      	ldr	r2, [r4, #0]
 8002904:	bf18      	it	ne
 8002906:	2301      	movne	r3, #1
 8002908:	0692      	lsls	r2, r2, #26
 800290a:	d42d      	bmi.n	8002968 <_printf_common+0xb4>
 800290c:	4649      	mov	r1, r9
 800290e:	4638      	mov	r0, r7
 8002910:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002914:	47c0      	blx	r8
 8002916:	3001      	adds	r0, #1
 8002918:	d020      	beq.n	800295c <_printf_common+0xa8>
 800291a:	6823      	ldr	r3, [r4, #0]
 800291c:	68e5      	ldr	r5, [r4, #12]
 800291e:	f003 0306 	and.w	r3, r3, #6
 8002922:	2b04      	cmp	r3, #4
 8002924:	bf18      	it	ne
 8002926:	2500      	movne	r5, #0
 8002928:	6832      	ldr	r2, [r6, #0]
 800292a:	f04f 0600 	mov.w	r6, #0
 800292e:	68a3      	ldr	r3, [r4, #8]
 8002930:	bf08      	it	eq
 8002932:	1aad      	subeq	r5, r5, r2
 8002934:	6922      	ldr	r2, [r4, #16]
 8002936:	bf08      	it	eq
 8002938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800293c:	4293      	cmp	r3, r2
 800293e:	bfc4      	itt	gt
 8002940:	1a9b      	subgt	r3, r3, r2
 8002942:	18ed      	addgt	r5, r5, r3
 8002944:	341a      	adds	r4, #26
 8002946:	42b5      	cmp	r5, r6
 8002948:	d11a      	bne.n	8002980 <_printf_common+0xcc>
 800294a:	2000      	movs	r0, #0
 800294c:	e008      	b.n	8002960 <_printf_common+0xac>
 800294e:	2301      	movs	r3, #1
 8002950:	4652      	mov	r2, sl
 8002952:	4649      	mov	r1, r9
 8002954:	4638      	mov	r0, r7
 8002956:	47c0      	blx	r8
 8002958:	3001      	adds	r0, #1
 800295a:	d103      	bne.n	8002964 <_printf_common+0xb0>
 800295c:	f04f 30ff 	mov.w	r0, #4294967295
 8002960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002964:	3501      	adds	r5, #1
 8002966:	e7c4      	b.n	80028f2 <_printf_common+0x3e>
 8002968:	2030      	movs	r0, #48	; 0x30
 800296a:	18e1      	adds	r1, r4, r3
 800296c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002970:	1c5a      	adds	r2, r3, #1
 8002972:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002976:	4422      	add	r2, r4
 8002978:	3302      	adds	r3, #2
 800297a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800297e:	e7c5      	b.n	800290c <_printf_common+0x58>
 8002980:	2301      	movs	r3, #1
 8002982:	4622      	mov	r2, r4
 8002984:	4649      	mov	r1, r9
 8002986:	4638      	mov	r0, r7
 8002988:	47c0      	blx	r8
 800298a:	3001      	adds	r0, #1
 800298c:	d0e6      	beq.n	800295c <_printf_common+0xa8>
 800298e:	3601      	adds	r6, #1
 8002990:	e7d9      	b.n	8002946 <_printf_common+0x92>
	...

08002994 <_printf_i>:
 8002994:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002998:	7e0f      	ldrb	r7, [r1, #24]
 800299a:	4691      	mov	r9, r2
 800299c:	2f78      	cmp	r7, #120	; 0x78
 800299e:	4680      	mov	r8, r0
 80029a0:	460c      	mov	r4, r1
 80029a2:	469a      	mov	sl, r3
 80029a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80029a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80029aa:	d807      	bhi.n	80029bc <_printf_i+0x28>
 80029ac:	2f62      	cmp	r7, #98	; 0x62
 80029ae:	d80a      	bhi.n	80029c6 <_printf_i+0x32>
 80029b0:	2f00      	cmp	r7, #0
 80029b2:	f000 80d9 	beq.w	8002b68 <_printf_i+0x1d4>
 80029b6:	2f58      	cmp	r7, #88	; 0x58
 80029b8:	f000 80a4 	beq.w	8002b04 <_printf_i+0x170>
 80029bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80029c4:	e03a      	b.n	8002a3c <_printf_i+0xa8>
 80029c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80029ca:	2b15      	cmp	r3, #21
 80029cc:	d8f6      	bhi.n	80029bc <_printf_i+0x28>
 80029ce:	a101      	add	r1, pc, #4	; (adr r1, 80029d4 <_printf_i+0x40>)
 80029d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80029d4:	08002a2d 	.word	0x08002a2d
 80029d8:	08002a41 	.word	0x08002a41
 80029dc:	080029bd 	.word	0x080029bd
 80029e0:	080029bd 	.word	0x080029bd
 80029e4:	080029bd 	.word	0x080029bd
 80029e8:	080029bd 	.word	0x080029bd
 80029ec:	08002a41 	.word	0x08002a41
 80029f0:	080029bd 	.word	0x080029bd
 80029f4:	080029bd 	.word	0x080029bd
 80029f8:	080029bd 	.word	0x080029bd
 80029fc:	080029bd 	.word	0x080029bd
 8002a00:	08002b4f 	.word	0x08002b4f
 8002a04:	08002a71 	.word	0x08002a71
 8002a08:	08002b31 	.word	0x08002b31
 8002a0c:	080029bd 	.word	0x080029bd
 8002a10:	080029bd 	.word	0x080029bd
 8002a14:	08002b71 	.word	0x08002b71
 8002a18:	080029bd 	.word	0x080029bd
 8002a1c:	08002a71 	.word	0x08002a71
 8002a20:	080029bd 	.word	0x080029bd
 8002a24:	080029bd 	.word	0x080029bd
 8002a28:	08002b39 	.word	0x08002b39
 8002a2c:	682b      	ldr	r3, [r5, #0]
 8002a2e:	1d1a      	adds	r2, r3, #4
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	602a      	str	r2, [r5, #0]
 8002a34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e0a4      	b.n	8002b8a <_printf_i+0x1f6>
 8002a40:	6820      	ldr	r0, [r4, #0]
 8002a42:	6829      	ldr	r1, [r5, #0]
 8002a44:	0606      	lsls	r6, r0, #24
 8002a46:	f101 0304 	add.w	r3, r1, #4
 8002a4a:	d50a      	bpl.n	8002a62 <_printf_i+0xce>
 8002a4c:	680e      	ldr	r6, [r1, #0]
 8002a4e:	602b      	str	r3, [r5, #0]
 8002a50:	2e00      	cmp	r6, #0
 8002a52:	da03      	bge.n	8002a5c <_printf_i+0xc8>
 8002a54:	232d      	movs	r3, #45	; 0x2d
 8002a56:	4276      	negs	r6, r6
 8002a58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a5c:	230a      	movs	r3, #10
 8002a5e:	485e      	ldr	r0, [pc, #376]	; (8002bd8 <_printf_i+0x244>)
 8002a60:	e019      	b.n	8002a96 <_printf_i+0x102>
 8002a62:	680e      	ldr	r6, [r1, #0]
 8002a64:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002a68:	602b      	str	r3, [r5, #0]
 8002a6a:	bf18      	it	ne
 8002a6c:	b236      	sxthne	r6, r6
 8002a6e:	e7ef      	b.n	8002a50 <_printf_i+0xbc>
 8002a70:	682b      	ldr	r3, [r5, #0]
 8002a72:	6820      	ldr	r0, [r4, #0]
 8002a74:	1d19      	adds	r1, r3, #4
 8002a76:	6029      	str	r1, [r5, #0]
 8002a78:	0601      	lsls	r1, r0, #24
 8002a7a:	d501      	bpl.n	8002a80 <_printf_i+0xec>
 8002a7c:	681e      	ldr	r6, [r3, #0]
 8002a7e:	e002      	b.n	8002a86 <_printf_i+0xf2>
 8002a80:	0646      	lsls	r6, r0, #25
 8002a82:	d5fb      	bpl.n	8002a7c <_printf_i+0xe8>
 8002a84:	881e      	ldrh	r6, [r3, #0]
 8002a86:	2f6f      	cmp	r7, #111	; 0x6f
 8002a88:	bf0c      	ite	eq
 8002a8a:	2308      	moveq	r3, #8
 8002a8c:	230a      	movne	r3, #10
 8002a8e:	4852      	ldr	r0, [pc, #328]	; (8002bd8 <_printf_i+0x244>)
 8002a90:	2100      	movs	r1, #0
 8002a92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002a96:	6865      	ldr	r5, [r4, #4]
 8002a98:	2d00      	cmp	r5, #0
 8002a9a:	bfa8      	it	ge
 8002a9c:	6821      	ldrge	r1, [r4, #0]
 8002a9e:	60a5      	str	r5, [r4, #8]
 8002aa0:	bfa4      	itt	ge
 8002aa2:	f021 0104 	bicge.w	r1, r1, #4
 8002aa6:	6021      	strge	r1, [r4, #0]
 8002aa8:	b90e      	cbnz	r6, 8002aae <_printf_i+0x11a>
 8002aaa:	2d00      	cmp	r5, #0
 8002aac:	d04d      	beq.n	8002b4a <_printf_i+0x1b6>
 8002aae:	4615      	mov	r5, r2
 8002ab0:	fbb6 f1f3 	udiv	r1, r6, r3
 8002ab4:	fb03 6711 	mls	r7, r3, r1, r6
 8002ab8:	5dc7      	ldrb	r7, [r0, r7]
 8002aba:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002abe:	4637      	mov	r7, r6
 8002ac0:	42bb      	cmp	r3, r7
 8002ac2:	460e      	mov	r6, r1
 8002ac4:	d9f4      	bls.n	8002ab0 <_printf_i+0x11c>
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	d10b      	bne.n	8002ae2 <_printf_i+0x14e>
 8002aca:	6823      	ldr	r3, [r4, #0]
 8002acc:	07de      	lsls	r6, r3, #31
 8002ace:	d508      	bpl.n	8002ae2 <_printf_i+0x14e>
 8002ad0:	6923      	ldr	r3, [r4, #16]
 8002ad2:	6861      	ldr	r1, [r4, #4]
 8002ad4:	4299      	cmp	r1, r3
 8002ad6:	bfde      	ittt	le
 8002ad8:	2330      	movle	r3, #48	; 0x30
 8002ada:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ade:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002ae2:	1b52      	subs	r2, r2, r5
 8002ae4:	6122      	str	r2, [r4, #16]
 8002ae6:	464b      	mov	r3, r9
 8002ae8:	4621      	mov	r1, r4
 8002aea:	4640      	mov	r0, r8
 8002aec:	f8cd a000 	str.w	sl, [sp]
 8002af0:	aa03      	add	r2, sp, #12
 8002af2:	f7ff fedf 	bl	80028b4 <_printf_common>
 8002af6:	3001      	adds	r0, #1
 8002af8:	d14c      	bne.n	8002b94 <_printf_i+0x200>
 8002afa:	f04f 30ff 	mov.w	r0, #4294967295
 8002afe:	b004      	add	sp, #16
 8002b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b04:	4834      	ldr	r0, [pc, #208]	; (8002bd8 <_printf_i+0x244>)
 8002b06:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002b0a:	6829      	ldr	r1, [r5, #0]
 8002b0c:	6823      	ldr	r3, [r4, #0]
 8002b0e:	f851 6b04 	ldr.w	r6, [r1], #4
 8002b12:	6029      	str	r1, [r5, #0]
 8002b14:	061d      	lsls	r5, r3, #24
 8002b16:	d514      	bpl.n	8002b42 <_printf_i+0x1ae>
 8002b18:	07df      	lsls	r7, r3, #31
 8002b1a:	bf44      	itt	mi
 8002b1c:	f043 0320 	orrmi.w	r3, r3, #32
 8002b20:	6023      	strmi	r3, [r4, #0]
 8002b22:	b91e      	cbnz	r6, 8002b2c <_printf_i+0x198>
 8002b24:	6823      	ldr	r3, [r4, #0]
 8002b26:	f023 0320 	bic.w	r3, r3, #32
 8002b2a:	6023      	str	r3, [r4, #0]
 8002b2c:	2310      	movs	r3, #16
 8002b2e:	e7af      	b.n	8002a90 <_printf_i+0xfc>
 8002b30:	6823      	ldr	r3, [r4, #0]
 8002b32:	f043 0320 	orr.w	r3, r3, #32
 8002b36:	6023      	str	r3, [r4, #0]
 8002b38:	2378      	movs	r3, #120	; 0x78
 8002b3a:	4828      	ldr	r0, [pc, #160]	; (8002bdc <_printf_i+0x248>)
 8002b3c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b40:	e7e3      	b.n	8002b0a <_printf_i+0x176>
 8002b42:	0659      	lsls	r1, r3, #25
 8002b44:	bf48      	it	mi
 8002b46:	b2b6      	uxthmi	r6, r6
 8002b48:	e7e6      	b.n	8002b18 <_printf_i+0x184>
 8002b4a:	4615      	mov	r5, r2
 8002b4c:	e7bb      	b.n	8002ac6 <_printf_i+0x132>
 8002b4e:	682b      	ldr	r3, [r5, #0]
 8002b50:	6826      	ldr	r6, [r4, #0]
 8002b52:	1d18      	adds	r0, r3, #4
 8002b54:	6961      	ldr	r1, [r4, #20]
 8002b56:	6028      	str	r0, [r5, #0]
 8002b58:	0635      	lsls	r5, r6, #24
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	d501      	bpl.n	8002b62 <_printf_i+0x1ce>
 8002b5e:	6019      	str	r1, [r3, #0]
 8002b60:	e002      	b.n	8002b68 <_printf_i+0x1d4>
 8002b62:	0670      	lsls	r0, r6, #25
 8002b64:	d5fb      	bpl.n	8002b5e <_printf_i+0x1ca>
 8002b66:	8019      	strh	r1, [r3, #0]
 8002b68:	2300      	movs	r3, #0
 8002b6a:	4615      	mov	r5, r2
 8002b6c:	6123      	str	r3, [r4, #16]
 8002b6e:	e7ba      	b.n	8002ae6 <_printf_i+0x152>
 8002b70:	682b      	ldr	r3, [r5, #0]
 8002b72:	2100      	movs	r1, #0
 8002b74:	1d1a      	adds	r2, r3, #4
 8002b76:	602a      	str	r2, [r5, #0]
 8002b78:	681d      	ldr	r5, [r3, #0]
 8002b7a:	6862      	ldr	r2, [r4, #4]
 8002b7c:	4628      	mov	r0, r5
 8002b7e:	f000 f82f 	bl	8002be0 <memchr>
 8002b82:	b108      	cbz	r0, 8002b88 <_printf_i+0x1f4>
 8002b84:	1b40      	subs	r0, r0, r5
 8002b86:	6060      	str	r0, [r4, #4]
 8002b88:	6863      	ldr	r3, [r4, #4]
 8002b8a:	6123      	str	r3, [r4, #16]
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b92:	e7a8      	b.n	8002ae6 <_printf_i+0x152>
 8002b94:	462a      	mov	r2, r5
 8002b96:	4649      	mov	r1, r9
 8002b98:	4640      	mov	r0, r8
 8002b9a:	6923      	ldr	r3, [r4, #16]
 8002b9c:	47d0      	blx	sl
 8002b9e:	3001      	adds	r0, #1
 8002ba0:	d0ab      	beq.n	8002afa <_printf_i+0x166>
 8002ba2:	6823      	ldr	r3, [r4, #0]
 8002ba4:	079b      	lsls	r3, r3, #30
 8002ba6:	d413      	bmi.n	8002bd0 <_printf_i+0x23c>
 8002ba8:	68e0      	ldr	r0, [r4, #12]
 8002baa:	9b03      	ldr	r3, [sp, #12]
 8002bac:	4298      	cmp	r0, r3
 8002bae:	bfb8      	it	lt
 8002bb0:	4618      	movlt	r0, r3
 8002bb2:	e7a4      	b.n	8002afe <_printf_i+0x16a>
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	4632      	mov	r2, r6
 8002bb8:	4649      	mov	r1, r9
 8002bba:	4640      	mov	r0, r8
 8002bbc:	47d0      	blx	sl
 8002bbe:	3001      	adds	r0, #1
 8002bc0:	d09b      	beq.n	8002afa <_printf_i+0x166>
 8002bc2:	3501      	adds	r5, #1
 8002bc4:	68e3      	ldr	r3, [r4, #12]
 8002bc6:	9903      	ldr	r1, [sp, #12]
 8002bc8:	1a5b      	subs	r3, r3, r1
 8002bca:	42ab      	cmp	r3, r5
 8002bcc:	dcf2      	bgt.n	8002bb4 <_printf_i+0x220>
 8002bce:	e7eb      	b.n	8002ba8 <_printf_i+0x214>
 8002bd0:	2500      	movs	r5, #0
 8002bd2:	f104 0619 	add.w	r6, r4, #25
 8002bd6:	e7f5      	b.n	8002bc4 <_printf_i+0x230>
 8002bd8:	08002f09 	.word	0x08002f09
 8002bdc:	08002f1a 	.word	0x08002f1a

08002be0 <memchr>:
 8002be0:	4603      	mov	r3, r0
 8002be2:	b510      	push	{r4, lr}
 8002be4:	b2c9      	uxtb	r1, r1
 8002be6:	4402      	add	r2, r0
 8002be8:	4293      	cmp	r3, r2
 8002bea:	4618      	mov	r0, r3
 8002bec:	d101      	bne.n	8002bf2 <memchr+0x12>
 8002bee:	2000      	movs	r0, #0
 8002bf0:	e003      	b.n	8002bfa <memchr+0x1a>
 8002bf2:	7804      	ldrb	r4, [r0, #0]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	428c      	cmp	r4, r1
 8002bf8:	d1f6      	bne.n	8002be8 <memchr+0x8>
 8002bfa:	bd10      	pop	{r4, pc}

08002bfc <memcpy>:
 8002bfc:	440a      	add	r2, r1
 8002bfe:	4291      	cmp	r1, r2
 8002c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8002c04:	d100      	bne.n	8002c08 <memcpy+0xc>
 8002c06:	4770      	bx	lr
 8002c08:	b510      	push	{r4, lr}
 8002c0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c0e:	4291      	cmp	r1, r2
 8002c10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c14:	d1f9      	bne.n	8002c0a <memcpy+0xe>
 8002c16:	bd10      	pop	{r4, pc}

08002c18 <memmove>:
 8002c18:	4288      	cmp	r0, r1
 8002c1a:	b510      	push	{r4, lr}
 8002c1c:	eb01 0402 	add.w	r4, r1, r2
 8002c20:	d902      	bls.n	8002c28 <memmove+0x10>
 8002c22:	4284      	cmp	r4, r0
 8002c24:	4623      	mov	r3, r4
 8002c26:	d807      	bhi.n	8002c38 <memmove+0x20>
 8002c28:	1e43      	subs	r3, r0, #1
 8002c2a:	42a1      	cmp	r1, r4
 8002c2c:	d008      	beq.n	8002c40 <memmove+0x28>
 8002c2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002c32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002c36:	e7f8      	b.n	8002c2a <memmove+0x12>
 8002c38:	4601      	mov	r1, r0
 8002c3a:	4402      	add	r2, r0
 8002c3c:	428a      	cmp	r2, r1
 8002c3e:	d100      	bne.n	8002c42 <memmove+0x2a>
 8002c40:	bd10      	pop	{r4, pc}
 8002c42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002c46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002c4a:	e7f7      	b.n	8002c3c <memmove+0x24>

08002c4c <_free_r>:
 8002c4c:	b538      	push	{r3, r4, r5, lr}
 8002c4e:	4605      	mov	r5, r0
 8002c50:	2900      	cmp	r1, #0
 8002c52:	d040      	beq.n	8002cd6 <_free_r+0x8a>
 8002c54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c58:	1f0c      	subs	r4, r1, #4
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	bfb8      	it	lt
 8002c5e:	18e4      	addlt	r4, r4, r3
 8002c60:	f000 f910 	bl	8002e84 <__malloc_lock>
 8002c64:	4a1c      	ldr	r2, [pc, #112]	; (8002cd8 <_free_r+0x8c>)
 8002c66:	6813      	ldr	r3, [r2, #0]
 8002c68:	b933      	cbnz	r3, 8002c78 <_free_r+0x2c>
 8002c6a:	6063      	str	r3, [r4, #4]
 8002c6c:	6014      	str	r4, [r2, #0]
 8002c6e:	4628      	mov	r0, r5
 8002c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c74:	f000 b90c 	b.w	8002e90 <__malloc_unlock>
 8002c78:	42a3      	cmp	r3, r4
 8002c7a:	d908      	bls.n	8002c8e <_free_r+0x42>
 8002c7c:	6820      	ldr	r0, [r4, #0]
 8002c7e:	1821      	adds	r1, r4, r0
 8002c80:	428b      	cmp	r3, r1
 8002c82:	bf01      	itttt	eq
 8002c84:	6819      	ldreq	r1, [r3, #0]
 8002c86:	685b      	ldreq	r3, [r3, #4]
 8002c88:	1809      	addeq	r1, r1, r0
 8002c8a:	6021      	streq	r1, [r4, #0]
 8002c8c:	e7ed      	b.n	8002c6a <_free_r+0x1e>
 8002c8e:	461a      	mov	r2, r3
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	b10b      	cbz	r3, 8002c98 <_free_r+0x4c>
 8002c94:	42a3      	cmp	r3, r4
 8002c96:	d9fa      	bls.n	8002c8e <_free_r+0x42>
 8002c98:	6811      	ldr	r1, [r2, #0]
 8002c9a:	1850      	adds	r0, r2, r1
 8002c9c:	42a0      	cmp	r0, r4
 8002c9e:	d10b      	bne.n	8002cb8 <_free_r+0x6c>
 8002ca0:	6820      	ldr	r0, [r4, #0]
 8002ca2:	4401      	add	r1, r0
 8002ca4:	1850      	adds	r0, r2, r1
 8002ca6:	4283      	cmp	r3, r0
 8002ca8:	6011      	str	r1, [r2, #0]
 8002caa:	d1e0      	bne.n	8002c6e <_free_r+0x22>
 8002cac:	6818      	ldr	r0, [r3, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	4401      	add	r1, r0
 8002cb2:	6011      	str	r1, [r2, #0]
 8002cb4:	6053      	str	r3, [r2, #4]
 8002cb6:	e7da      	b.n	8002c6e <_free_r+0x22>
 8002cb8:	d902      	bls.n	8002cc0 <_free_r+0x74>
 8002cba:	230c      	movs	r3, #12
 8002cbc:	602b      	str	r3, [r5, #0]
 8002cbe:	e7d6      	b.n	8002c6e <_free_r+0x22>
 8002cc0:	6820      	ldr	r0, [r4, #0]
 8002cc2:	1821      	adds	r1, r4, r0
 8002cc4:	428b      	cmp	r3, r1
 8002cc6:	bf01      	itttt	eq
 8002cc8:	6819      	ldreq	r1, [r3, #0]
 8002cca:	685b      	ldreq	r3, [r3, #4]
 8002ccc:	1809      	addeq	r1, r1, r0
 8002cce:	6021      	streq	r1, [r4, #0]
 8002cd0:	6063      	str	r3, [r4, #4]
 8002cd2:	6054      	str	r4, [r2, #4]
 8002cd4:	e7cb      	b.n	8002c6e <_free_r+0x22>
 8002cd6:	bd38      	pop	{r3, r4, r5, pc}
 8002cd8:	200003c4 	.word	0x200003c4

08002cdc <sbrk_aligned>:
 8002cdc:	b570      	push	{r4, r5, r6, lr}
 8002cde:	4e0e      	ldr	r6, [pc, #56]	; (8002d18 <sbrk_aligned+0x3c>)
 8002ce0:	460c      	mov	r4, r1
 8002ce2:	6831      	ldr	r1, [r6, #0]
 8002ce4:	4605      	mov	r5, r0
 8002ce6:	b911      	cbnz	r1, 8002cee <sbrk_aligned+0x12>
 8002ce8:	f000 f8bc 	bl	8002e64 <_sbrk_r>
 8002cec:	6030      	str	r0, [r6, #0]
 8002cee:	4621      	mov	r1, r4
 8002cf0:	4628      	mov	r0, r5
 8002cf2:	f000 f8b7 	bl	8002e64 <_sbrk_r>
 8002cf6:	1c43      	adds	r3, r0, #1
 8002cf8:	d00a      	beq.n	8002d10 <sbrk_aligned+0x34>
 8002cfa:	1cc4      	adds	r4, r0, #3
 8002cfc:	f024 0403 	bic.w	r4, r4, #3
 8002d00:	42a0      	cmp	r0, r4
 8002d02:	d007      	beq.n	8002d14 <sbrk_aligned+0x38>
 8002d04:	1a21      	subs	r1, r4, r0
 8002d06:	4628      	mov	r0, r5
 8002d08:	f000 f8ac 	bl	8002e64 <_sbrk_r>
 8002d0c:	3001      	adds	r0, #1
 8002d0e:	d101      	bne.n	8002d14 <sbrk_aligned+0x38>
 8002d10:	f04f 34ff 	mov.w	r4, #4294967295
 8002d14:	4620      	mov	r0, r4
 8002d16:	bd70      	pop	{r4, r5, r6, pc}
 8002d18:	200003c8 	.word	0x200003c8

08002d1c <_malloc_r>:
 8002d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d20:	1ccd      	adds	r5, r1, #3
 8002d22:	f025 0503 	bic.w	r5, r5, #3
 8002d26:	3508      	adds	r5, #8
 8002d28:	2d0c      	cmp	r5, #12
 8002d2a:	bf38      	it	cc
 8002d2c:	250c      	movcc	r5, #12
 8002d2e:	2d00      	cmp	r5, #0
 8002d30:	4607      	mov	r7, r0
 8002d32:	db01      	blt.n	8002d38 <_malloc_r+0x1c>
 8002d34:	42a9      	cmp	r1, r5
 8002d36:	d905      	bls.n	8002d44 <_malloc_r+0x28>
 8002d38:	230c      	movs	r3, #12
 8002d3a:	2600      	movs	r6, #0
 8002d3c:	603b      	str	r3, [r7, #0]
 8002d3e:	4630      	mov	r0, r6
 8002d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d44:	4e2e      	ldr	r6, [pc, #184]	; (8002e00 <_malloc_r+0xe4>)
 8002d46:	f000 f89d 	bl	8002e84 <__malloc_lock>
 8002d4a:	6833      	ldr	r3, [r6, #0]
 8002d4c:	461c      	mov	r4, r3
 8002d4e:	bb34      	cbnz	r4, 8002d9e <_malloc_r+0x82>
 8002d50:	4629      	mov	r1, r5
 8002d52:	4638      	mov	r0, r7
 8002d54:	f7ff ffc2 	bl	8002cdc <sbrk_aligned>
 8002d58:	1c43      	adds	r3, r0, #1
 8002d5a:	4604      	mov	r4, r0
 8002d5c:	d14d      	bne.n	8002dfa <_malloc_r+0xde>
 8002d5e:	6834      	ldr	r4, [r6, #0]
 8002d60:	4626      	mov	r6, r4
 8002d62:	2e00      	cmp	r6, #0
 8002d64:	d140      	bne.n	8002de8 <_malloc_r+0xcc>
 8002d66:	6823      	ldr	r3, [r4, #0]
 8002d68:	4631      	mov	r1, r6
 8002d6a:	4638      	mov	r0, r7
 8002d6c:	eb04 0803 	add.w	r8, r4, r3
 8002d70:	f000 f878 	bl	8002e64 <_sbrk_r>
 8002d74:	4580      	cmp	r8, r0
 8002d76:	d13a      	bne.n	8002dee <_malloc_r+0xd2>
 8002d78:	6821      	ldr	r1, [r4, #0]
 8002d7a:	3503      	adds	r5, #3
 8002d7c:	1a6d      	subs	r5, r5, r1
 8002d7e:	f025 0503 	bic.w	r5, r5, #3
 8002d82:	3508      	adds	r5, #8
 8002d84:	2d0c      	cmp	r5, #12
 8002d86:	bf38      	it	cc
 8002d88:	250c      	movcc	r5, #12
 8002d8a:	4638      	mov	r0, r7
 8002d8c:	4629      	mov	r1, r5
 8002d8e:	f7ff ffa5 	bl	8002cdc <sbrk_aligned>
 8002d92:	3001      	adds	r0, #1
 8002d94:	d02b      	beq.n	8002dee <_malloc_r+0xd2>
 8002d96:	6823      	ldr	r3, [r4, #0]
 8002d98:	442b      	add	r3, r5
 8002d9a:	6023      	str	r3, [r4, #0]
 8002d9c:	e00e      	b.n	8002dbc <_malloc_r+0xa0>
 8002d9e:	6822      	ldr	r2, [r4, #0]
 8002da0:	1b52      	subs	r2, r2, r5
 8002da2:	d41e      	bmi.n	8002de2 <_malloc_r+0xc6>
 8002da4:	2a0b      	cmp	r2, #11
 8002da6:	d916      	bls.n	8002dd6 <_malloc_r+0xba>
 8002da8:	1961      	adds	r1, r4, r5
 8002daa:	42a3      	cmp	r3, r4
 8002dac:	6025      	str	r5, [r4, #0]
 8002dae:	bf18      	it	ne
 8002db0:	6059      	strne	r1, [r3, #4]
 8002db2:	6863      	ldr	r3, [r4, #4]
 8002db4:	bf08      	it	eq
 8002db6:	6031      	streq	r1, [r6, #0]
 8002db8:	5162      	str	r2, [r4, r5]
 8002dba:	604b      	str	r3, [r1, #4]
 8002dbc:	4638      	mov	r0, r7
 8002dbe:	f104 060b 	add.w	r6, r4, #11
 8002dc2:	f000 f865 	bl	8002e90 <__malloc_unlock>
 8002dc6:	f026 0607 	bic.w	r6, r6, #7
 8002dca:	1d23      	adds	r3, r4, #4
 8002dcc:	1af2      	subs	r2, r6, r3
 8002dce:	d0b6      	beq.n	8002d3e <_malloc_r+0x22>
 8002dd0:	1b9b      	subs	r3, r3, r6
 8002dd2:	50a3      	str	r3, [r4, r2]
 8002dd4:	e7b3      	b.n	8002d3e <_malloc_r+0x22>
 8002dd6:	6862      	ldr	r2, [r4, #4]
 8002dd8:	42a3      	cmp	r3, r4
 8002dda:	bf0c      	ite	eq
 8002ddc:	6032      	streq	r2, [r6, #0]
 8002dde:	605a      	strne	r2, [r3, #4]
 8002de0:	e7ec      	b.n	8002dbc <_malloc_r+0xa0>
 8002de2:	4623      	mov	r3, r4
 8002de4:	6864      	ldr	r4, [r4, #4]
 8002de6:	e7b2      	b.n	8002d4e <_malloc_r+0x32>
 8002de8:	4634      	mov	r4, r6
 8002dea:	6876      	ldr	r6, [r6, #4]
 8002dec:	e7b9      	b.n	8002d62 <_malloc_r+0x46>
 8002dee:	230c      	movs	r3, #12
 8002df0:	4638      	mov	r0, r7
 8002df2:	603b      	str	r3, [r7, #0]
 8002df4:	f000 f84c 	bl	8002e90 <__malloc_unlock>
 8002df8:	e7a1      	b.n	8002d3e <_malloc_r+0x22>
 8002dfa:	6025      	str	r5, [r4, #0]
 8002dfc:	e7de      	b.n	8002dbc <_malloc_r+0xa0>
 8002dfe:	bf00      	nop
 8002e00:	200003c4 	.word	0x200003c4

08002e04 <_realloc_r>:
 8002e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e08:	4680      	mov	r8, r0
 8002e0a:	4614      	mov	r4, r2
 8002e0c:	460e      	mov	r6, r1
 8002e0e:	b921      	cbnz	r1, 8002e1a <_realloc_r+0x16>
 8002e10:	4611      	mov	r1, r2
 8002e12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e16:	f7ff bf81 	b.w	8002d1c <_malloc_r>
 8002e1a:	b92a      	cbnz	r2, 8002e28 <_realloc_r+0x24>
 8002e1c:	f7ff ff16 	bl	8002c4c <_free_r>
 8002e20:	4625      	mov	r5, r4
 8002e22:	4628      	mov	r0, r5
 8002e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e28:	f000 f838 	bl	8002e9c <_malloc_usable_size_r>
 8002e2c:	4284      	cmp	r4, r0
 8002e2e:	4607      	mov	r7, r0
 8002e30:	d802      	bhi.n	8002e38 <_realloc_r+0x34>
 8002e32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002e36:	d812      	bhi.n	8002e5e <_realloc_r+0x5a>
 8002e38:	4621      	mov	r1, r4
 8002e3a:	4640      	mov	r0, r8
 8002e3c:	f7ff ff6e 	bl	8002d1c <_malloc_r>
 8002e40:	4605      	mov	r5, r0
 8002e42:	2800      	cmp	r0, #0
 8002e44:	d0ed      	beq.n	8002e22 <_realloc_r+0x1e>
 8002e46:	42bc      	cmp	r4, r7
 8002e48:	4622      	mov	r2, r4
 8002e4a:	4631      	mov	r1, r6
 8002e4c:	bf28      	it	cs
 8002e4e:	463a      	movcs	r2, r7
 8002e50:	f7ff fed4 	bl	8002bfc <memcpy>
 8002e54:	4631      	mov	r1, r6
 8002e56:	4640      	mov	r0, r8
 8002e58:	f7ff fef8 	bl	8002c4c <_free_r>
 8002e5c:	e7e1      	b.n	8002e22 <_realloc_r+0x1e>
 8002e5e:	4635      	mov	r5, r6
 8002e60:	e7df      	b.n	8002e22 <_realloc_r+0x1e>
	...

08002e64 <_sbrk_r>:
 8002e64:	b538      	push	{r3, r4, r5, lr}
 8002e66:	2300      	movs	r3, #0
 8002e68:	4d05      	ldr	r5, [pc, #20]	; (8002e80 <_sbrk_r+0x1c>)
 8002e6a:	4604      	mov	r4, r0
 8002e6c:	4608      	mov	r0, r1
 8002e6e:	602b      	str	r3, [r5, #0]
 8002e70:	f7fd fd8e 	bl	8000990 <_sbrk>
 8002e74:	1c43      	adds	r3, r0, #1
 8002e76:	d102      	bne.n	8002e7e <_sbrk_r+0x1a>
 8002e78:	682b      	ldr	r3, [r5, #0]
 8002e7a:	b103      	cbz	r3, 8002e7e <_sbrk_r+0x1a>
 8002e7c:	6023      	str	r3, [r4, #0]
 8002e7e:	bd38      	pop	{r3, r4, r5, pc}
 8002e80:	200003cc 	.word	0x200003cc

08002e84 <__malloc_lock>:
 8002e84:	4801      	ldr	r0, [pc, #4]	; (8002e8c <__malloc_lock+0x8>)
 8002e86:	f000 b811 	b.w	8002eac <__retarget_lock_acquire_recursive>
 8002e8a:	bf00      	nop
 8002e8c:	200003d0 	.word	0x200003d0

08002e90 <__malloc_unlock>:
 8002e90:	4801      	ldr	r0, [pc, #4]	; (8002e98 <__malloc_unlock+0x8>)
 8002e92:	f000 b80c 	b.w	8002eae <__retarget_lock_release_recursive>
 8002e96:	bf00      	nop
 8002e98:	200003d0 	.word	0x200003d0

08002e9c <_malloc_usable_size_r>:
 8002e9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ea0:	1f18      	subs	r0, r3, #4
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	bfbc      	itt	lt
 8002ea6:	580b      	ldrlt	r3, [r1, r0]
 8002ea8:	18c0      	addlt	r0, r0, r3
 8002eaa:	4770      	bx	lr

08002eac <__retarget_lock_acquire_recursive>:
 8002eac:	4770      	bx	lr

08002eae <__retarget_lock_release_recursive>:
 8002eae:	4770      	bx	lr

08002eb0 <_init>:
 8002eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb2:	bf00      	nop
 8002eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eb6:	bc08      	pop	{r3}
 8002eb8:	469e      	mov	lr, r3
 8002eba:	4770      	bx	lr

08002ebc <_fini>:
 8002ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ebe:	bf00      	nop
 8002ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ec2:	bc08      	pop	{r3}
 8002ec4:	469e      	mov	lr, r3
 8002ec6:	4770      	bx	lr
